/**
 * generated by Xtext
 */
package org.xtext.example.webgme.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.webgme.mTL.Assignation;
import org.xtext.example.webgme.mTL.AssocRoleName;
import org.xtext.example.webgme.mTL.CollectOp;
import org.xtext.example.webgme.mTL.ComplexExpression;
import org.xtext.example.webgme.mTL.ConcatOp;
import org.xtext.example.webgme.mTL.ExistsOp;
import org.xtext.example.webgme.mTL.Filter;
import org.xtext.example.webgme.mTL.ForAllOp;
import org.xtext.example.webgme.mTL.IfSentence;
import org.xtext.example.webgme.mTL.InPattern;
import org.xtext.example.webgme.mTL.IndexOfOp;
import org.xtext.example.webgme.mTL.IntersectionOp;
import org.xtext.example.webgme.mTL.IsTypeOfOp;
import org.xtext.example.webgme.mTL.Navig;
import org.xtext.example.webgme.mTL.Navigation;
import org.xtext.example.webgme.mTL.OCLOperationType1;
import org.xtext.example.webgme.mTL.OCLOperationType2;
import org.xtext.example.webgme.mTL.OutPattern;
import org.xtext.example.webgme.mTL.ResolveExp;
import org.xtext.example.webgme.mTL.Rule;
import org.xtext.example.webgme.mTL.SelectOp;
import org.xtext.example.webgme.mTL.SimpleExpression;
import org.xtext.example.webgme.mTL.UnionOp;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MTLGenerator implements IGenerator {
  private int i;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    URI _uRI = resource.getURI();
    String _string = _uRI.toString();
    URI _uRI_1 = resource.getURI();
    String _string_1 = _uRI_1.toString();
    int _lastIndexOf = _string_1.lastIndexOf("/");
    URI _uRI_2 = resource.getURI();
    String _string_2 = _uRI_2.toString();
    int _lastIndexOf_1 = _string_2.lastIndexOf(".");
    String _substring = _string.substring(_lastIndexOf, _lastIndexOf_1);
    String _plus = (_substring + ".js");
    CharSequence _compile = this.compile(resource);
    fsa.generateFile(_plus, _compile);
  }
  
  public CharSequence compile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _writeIntro = this.writeIntro();
    _builder.append(_writeIntro, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.main = function (callback) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this,");
    _builder.newLine();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<OutPattern> _filter = Iterables.<OutPattern>filter(_iterable, OutPattern.class);
      for(final OutPattern outPattern : _filter) {
        _builder.append("        \t");
        String _varName = outPattern.getVarName();
        _builder.append(_varName, "        \t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        \t");
    _builder.append("trgModelNode,");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("elem;");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.extractDataModel()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".then(function () {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("/* Setting the pointer to the trgModel node where the target model will be stored */");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("trgModelNode = self.activeNode;");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    CharSequence _writeFirstPhase = this.writeFirstPhase(resource);
    _builder.append(_writeFirstPhase, "                ");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    CharSequence _writeSecondPhase = this.writeSecondPhase(resource);
    _builder.append(_writeSecondPhase, "                ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".then(function () {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return self.save(\'class2relational updated model.\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".then(function () {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("self.result.setSuccess(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("callback(null, self.result);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _writeMTMethods = this.writeMTMethods();
    _builder.append(_writeMTMethods, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return modeltransformation;");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence writeIntro() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define([");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'plugin/PluginConfig\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'text!./metadata.json\',");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'plugin/PluginBase\'");
    _builder.newLine();
    _builder.append("], function (");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("PluginConfig,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pluginMetadata,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("PluginBase) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pluginMetadata = JSON.parse(pluginMetadata);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var modeltransformation = function () {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Call base class\' constructor.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("PluginBase.call(this);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.pluginMetadata = pluginMetadata;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.pathToNode = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.trgElements = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.traces = {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("trace: []");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.metadata = pluginMetadata;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype = Object.create(PluginBase.prototype);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.constructor = modeltransformation;");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence writeFirstPhase(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* First phase - Element creation */");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (var key in self.pathToNode){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("elem = self.pathToNode[key];");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Rule> _filter = Iterables.<Rule>filter(_iterable, Rule.class);
      for(final Rule rule : _filter) {
        {
          String _name = rule.getName();
          boolean _notEquals = (!Objects.equal(_name, null));
          if (_notEquals) {
            _builder.newLine();
            {
              EList<InPattern> _inPatterns = rule.getInPatterns();
              boolean _notEquals_1 = (!Objects.equal(_inPatterns, null));
              if (_notEquals_1) {
                _builder.append("if (self.isMetaTypeOf(elem, self.META[\'");
                EList<InPattern> _inPatterns_1 = rule.getInPatterns();
                InPattern _get = _inPatterns_1.get(0);
                String _className = _get.getClassName();
                _builder.append(_className, "");
                _builder.append("\']) === true) {");
                _builder.newLineIfNotEmpty();
                _builder.append(" \t");
                _builder.append("var ");
                EList<InPattern> _inPatterns_2 = rule.getInPatterns();
                InPattern _get_1 = _inPatterns_2.get(0);
                String _inElem = _get_1.getInElem();
                _builder.append(_inElem, " \t");
                _builder.append(" = elem;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Filter _filter_1 = rule.getFilter();
              boolean _notEquals_2 = (!Objects.equal(_filter_1, null));
              if (_notEquals_2) {
                _builder.append("                     \t");
                Filter _filter_2 = rule.getFilter();
                ComplexExpression _expr = _filter_2.getExpr();
                CharSequence _compileComplexExpression = this.compileComplexExpression(_expr, 0, "filter");
                _builder.append(_compileComplexExpression, "                     \t");
                _builder.newLineIfNotEmpty();
                _builder.append("                     \t");
                _builder.append("if (filter){");
                _builder.newLine();
              }
            }
            _builder.append("                     \t");
            _builder.newLine();
            _builder.append("                     \t");
            _builder.append("self.logger.error(\'Rule: Class 2 Table\');");
            _builder.newLine();
            _builder.append("                     \t");
            _builder.append("/* Elements creation */");
            _builder.newLine();
            {
              EList<OutPattern> _outPatterns = rule.getOutPatterns();
              int _size = _outPatterns.size();
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
              for(final Integer i : _doubleDotLessThan) {
                _builder.append("                     ");
                _builder.newLine();
                _builder.append("                     ");
                _builder.append("var trace");
                _builder.append(i, "                     ");
                _builder.append(" = {");
                _builder.newLineIfNotEmpty();
                _builder.append("                            ");
                _builder.append("srcElementIds: [],");
                _builder.newLine();
                _builder.append("                            ");
                _builder.append("trgElementId: \'\',");
                _builder.newLine();
                _builder.append("                            ");
                _builder.append("ruleName: \'\',");
                _builder.newLine();
                _builder.append("                            ");
                _builder.append("position: 0");
                _builder.newLine();
                _builder.append("                        ");
                _builder.append("}; // Missing the rest of the traces");
                _builder.newLine();
                _builder.append("                     ");
                _builder.newLine();
                _builder.append("\t        \t\t\t\t");
                EList<OutPattern> _outPatterns_1 = rule.getOutPatterns();
                OutPattern _get_2 = _outPatterns_1.get((i).intValue());
                String _varName = _get_2.getVarName();
                _builder.append(_varName, "\t        \t\t\t\t");
                _builder.append(" = self.core.createNode({");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("       ");
                _builder.append("parent: trgModelNode,");
                _builder.newLine();
                _builder.append("                     ");
                _builder.append("       ");
                _builder.append("base: self.META.");
                EList<OutPattern> _outPatterns_2 = rule.getOutPatterns();
                OutPattern _get_3 = _outPatterns_2.get((i).intValue());
                String _className_1 = _get_3.getClassName();
                _builder.append(_className_1, "                            ");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("});");
                _builder.newLine();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("self.core.setAttribute(");
                EList<OutPattern> _outPatterns_3 = rule.getOutPatterns();
                OutPattern _get_4 = _outPatterns_3.get((i).intValue());
                String _varName_1 = _get_4.getVarName();
                _builder.append(_varName_1, "                        ");
                _builder.append(", \'name\', \'");
                EList<OutPattern> _outPatterns_4 = rule.getOutPatterns();
                OutPattern _get_5 = _outPatterns_4.get((i).intValue());
                String _className_2 = _get_5.getClassName();
                _builder.append(_className_2, "                        ");
                _builder.append("\');");
                _builder.newLineIfNotEmpty();
                {
                  EList<OutPattern> _outPatterns_5 = rule.getOutPatterns();
                  OutPattern _get_6 = _outPatterns_5.get((i).intValue());
                  EList<Assignation> _assg = _get_6.getAssg();
                  for(final Assignation assig : _assg) {
                    _builder.append("                     ");
                    _builder.append("   ");
                    _builder.append("//--");
                    _builder.newLine();
                    {
                      String _attribute = assig.getAttribute();
                      boolean _notEquals_3 = (!Objects.equal(_attribute, null));
                      if (_notEquals_3) {
                        _builder.append("\t\t                        ");
                        ComplexExpression _expr_1 = assig.getExpr();
                        CharSequence _compileComplexExpression_1 = this.compileComplexExpression(_expr_1, 0, "exp");
                        _builder.append(_compileComplexExpression_1, "\t\t                        ");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t                        ");
                        _builder.append("self.core.setAttribute(");
                        EList<OutPattern> _outPatterns_6 = rule.getOutPatterns();
                        OutPattern _get_7 = _outPatterns_6.get((i).intValue());
                        String _varName_2 = _get_7.getVarName();
                        _builder.append(_varName_2, "\t\t                        ");
                        _builder.append(", \'");
                        String _attribute_1 = assig.getAttribute();
                        _builder.append(_attribute_1, "\t\t                        ");
                        _builder.append("\', exp);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t                        ");
                        _builder.append("//--");
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("self.core.setRegistry(");
                EList<OutPattern> _outPatterns_7 = rule.getOutPatterns();
                OutPattern _get_8 = _outPatterns_7.get((i).intValue());
                String _varName_3 = _get_8.getVarName();
                _builder.append(_varName_3, "                        ");
                _builder.append(", \'position\', {x: 50, y: 100});");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("self.trgElements[self.core.getPath(");
                EList<OutPattern> _outPatterns_8 = rule.getOutPatterns();
                OutPattern _get_9 = _outPatterns_8.get((i).intValue());
                String _varName_4 = _get_9.getVarName();
                _builder.append(_varName_4, "                        ");
                _builder.append(")] = ");
                EList<OutPattern> _outPatterns_9 = rule.getOutPatterns();
                OutPattern _get_10 = _outPatterns_9.get((i).intValue());
                String _varName_5 = _get_10.getVarName();
                _builder.append(_varName_5, "                        ");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("trace");
                _builder.append(i, "                        ");
                _builder.append(".srcElementIds.push(key);");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("trace");
                _builder.append(i, "                        ");
                _builder.append(".trgElementId = self.core.getPath(");
                EList<OutPattern> _outPatterns_10 = rule.getOutPatterns();
                OutPattern _get_11 = _outPatterns_10.get((i).intValue());
                String _varName_6 = _get_11.getVarName();
                _builder.append(_varName_6, "                        ");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("trace");
                _builder.append(i, "                        ");
                _builder.append(".ruleName = \'");
                String _name_1 = rule.getName();
                _builder.append(_name_1, "                        ");
                _builder.append("\';");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("trace");
                _builder.append(i, "                        ");
                _builder.append(".position = ");
                _builder.append(((i).intValue() + 1), "                        ");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("                     ");
                _builder.append("   ");
                _builder.append("self.traces[trace");
                _builder.append(i, "                        ");
                _builder.append(".srcElementIds + \'-\' + trace");
                _builder.append(i, "                        ");
                _builder.append(".position] = trace");
                _builder.append(i, "                        ");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("        \t\t\t\t");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("                     \t");
            _builder.append("}");
            _builder.newLine();
            {
              Filter _filter_3 = rule.getFilter();
              boolean _notEquals_4 = (!Objects.equal(_filter_3, null));
              if (_notEquals_4) {
                _builder.append("                     \t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t\t        ");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("self.logger.error(\'First phase finished. Starting second phase\');");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence writeSecondPhase(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* Second phase - Association creation */");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (var key in self.pathToNode){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("elem = self.pathToNode[key];");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Rule> _filter = Iterables.<Rule>filter(_iterable, Rule.class);
      for(final Rule rule : _filter) {
        {
          String _name = rule.getName();
          boolean _notEquals = (!Objects.equal(_name, null));
          if (_notEquals) {
            _builder.newLine();
            {
              EList<InPattern> _inPatterns = rule.getInPatterns();
              boolean _notEquals_1 = (!Objects.equal(_inPatterns, null));
              if (_notEquals_1) {
                _builder.append("if (self.isMetaTypeOf(elem, self.META[\'");
                EList<InPattern> _inPatterns_1 = rule.getInPatterns();
                InPattern _get = _inPatterns_1.get(0);
                String _className = _get.getClassName();
                _builder.append(_className, "");
                _builder.append("\']) === true) {");
                _builder.newLineIfNotEmpty();
                _builder.append(" \t");
                _builder.append("var ");
                EList<InPattern> _inPatterns_2 = rule.getInPatterns();
                InPattern _get_1 = _inPatterns_2.get(0);
                String _inElem = _get_1.getInElem();
                _builder.append(_inElem, " \t");
                _builder.append(" = elem;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Filter _filter_1 = rule.getFilter();
              boolean _notEquals_2 = (!Objects.equal(_filter_1, null));
              if (_notEquals_2) {
                _builder.append("                     \t");
                Filter _filter_2 = rule.getFilter();
                ComplexExpression _expr = _filter_2.getExpr();
                CharSequence _compileComplexExpression = this.compileComplexExpression(_expr, 0, "filter");
                _builder.append(_compileComplexExpression, "                     \t");
                _builder.newLineIfNotEmpty();
                _builder.append("                     \t");
                _builder.append("if (filter){");
                _builder.newLine();
              }
            }
            _builder.append("                     \t");
            _builder.newLine();
            _builder.append("                     \t");
            _builder.append("self.logger.error(\'Rule: Class 2 Table\');");
            _builder.newLine();
            _builder.append("                     \t");
            _builder.append("/* Elements creation */");
            _builder.newLine();
            {
              EList<OutPattern> _outPatterns = rule.getOutPatterns();
              int _size = _outPatterns.size();
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
              for(final Integer i : _doubleDotLessThan) {
                _builder.append("                     ");
                _builder.newLine();
                {
                  EList<OutPattern> _outPatterns_1 = rule.getOutPatterns();
                  OutPattern _get_2 = _outPatterns_1.get((i).intValue());
                  EList<Assignation> _assg = _get_2.getAssg();
                  for(final Assignation assig : _assg) {
                    _builder.append("                     ");
                    _builder.append("   ");
                    _builder.newLine();
                    _builder.append("                     ");
                    _builder.append("   ");
                    _builder.newLine();
                    _builder.append("                     ");
                    _builder.append("   ");
                    _builder.newLine();
                    {
                      AssocRoleName _relationship = assig.getRelationship();
                      boolean _notEquals_3 = (!Objects.equal(_relationship, null));
                      if (_notEquals_3) {
                        _builder.append("\t\t                        ");
                        _builder.append("//--");
                        _builder.newLine();
                        _builder.append("\t\t                        ");
                        EList<OutPattern> _outPatterns_2 = rule.getOutPatterns();
                        OutPattern _get_3 = _outPatterns_2.get((i).intValue());
                        String _varName = _get_3.getVarName();
                        _builder.append(_varName, "\t\t                        ");
                        _builder.append(" = self.resolve(elem, ");
                        _builder.append(((i).intValue() + 1), "\t\t                        ");
                        _builder.append(");");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t                        ");
                        ComplexExpression _expr_1 = assig.getExpr();
                        CharSequence _compileComplexExpression_1 = this.compileComplexExpression(_expr_1, 0, "exp");
                        _builder.append(_compileComplexExpression_1, "\t\t                        ");
                        _builder.newLineIfNotEmpty();
                        {
                          AssocRoleName _relationship_1 = assig.getRelationship();
                          String _children = _relationship_1.getChildren();
                          boolean _notEquals_4 = (!Objects.equal(_children, null));
                          if (_notEquals_4) {
                            _builder.append("\t\t                        ");
                            _builder.append("if ( exp instanceof Array ) {");
                            _builder.newLine();
                            _builder.append("\t\t                        ");
                            _builder.append("\t");
                            _builder.append("self.addChildren(");
                            EList<OutPattern> _outPatterns_3 = rule.getOutPatterns();
                            OutPattern _get_4 = _outPatterns_3.get((i).intValue());
                            String _varName_1 = _get_4.getVarName();
                            _builder.append(_varName_1, "\t\t                        \t");
                            _builder.append(", exp);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t                        ");
                            _builder.append("} else {");
                            _builder.newLine();
                            _builder.append("\t\t                        ");
                            _builder.append("\t");
                            _builder.append("self.addChild(");
                            EList<OutPattern> _outPatterns_4 = rule.getOutPatterns();
                            OutPattern _get_5 = _outPatterns_4.get((i).intValue());
                            String _varName_2 = _get_5.getVarName();
                            _builder.append(_varName_2, "\t\t                        \t");
                            _builder.append(", exp);");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t                        ");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                        {
                          AssocRoleName _relationship_2 = assig.getRelationship();
                          String _parent = _relationship_2.getParent();
                          boolean _notEquals_5 = (!Objects.equal(_parent, null));
                          if (_notEquals_5) {
                            _builder.append("\t\t                        ");
                            _builder.append("self.setParent(");
                            EList<OutPattern> _outPatterns_5 = rule.getOutPatterns();
                            OutPattern _get_6 = _outPatterns_5.get((i).intValue());
                            String _varName_3 = _get_6.getVarName();
                            _builder.append(_varName_3, "\t\t                        ");
                            _builder.append(", exp);");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                        {
                          AssocRoleName _relationship_3 = assig.getRelationship();
                          String _name_1 = _relationship_3.getName();
                          boolean _notEquals_6 = (!Objects.equal(_name_1, null));
                          if (_notEquals_6) {
                            _builder.append("\t\t                        ");
                            _builder.append("self.core.setPointer(");
                            EList<OutPattern> _outPatterns_6 = rule.getOutPatterns();
                            OutPattern _get_7 = _outPatterns_6.get((i).intValue());
                            String _varName_4 = _get_7.getVarName();
                            _builder.append(_varName_4, "\t\t                        ");
                            _builder.append(", \'key\', exp);");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                        _builder.append("\t\t                        ");
                        _builder.append("//--");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
            _builder.append("                     \t");
            _builder.append("}");
            _builder.newLine();
            {
              Filter _filter_3 = rule.getFilter();
              boolean _notEquals_7 = (!Objects.equal(_filter_3, null));
              if (_notEquals_7) {
                _builder.append("                     \t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t\t        ");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("                ");
    _builder.append("}\t\t          ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("self.logger.error(\'done\');");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileComplexExpression(final ComplexExpression expression, final int nestingLevel, final String varName) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SimpleExpression _left = expression.getLeft();
      boolean _notEquals = (!Objects.equal(_left, null));
      if (_notEquals) {
        SimpleExpression _left_1 = expression.getLeft();
        CharSequence _compileSimpleExpression = this.compileSimpleExpression(_left_1, nestingLevel, "left");
        _builder.append(_compileSimpleExpression, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _and = false;
      boolean _and_1 = false;
      boolean _and_2 = false;
      EList<SimpleExpression> _right = expression.getRight();
      boolean _notEquals_1 = (!Objects.equal(_right, null));
      if (!_notEquals_1) {
        _and_2 = false;
      } else {
        EList<SimpleExpression> _right_1 = expression.getRight();
        int _size = _right_1.size();
        boolean _greaterThan = (_size > 0);
        _and_2 = _greaterThan;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        EList<String> _infixOp = expression.getInfixOp();
        boolean _notEquals_2 = (!Objects.equal(_infixOp, null));
        _and_1 = _notEquals_2;
      }
      if (!_and_1) {
        _and = false;
      } else {
        EList<String> _infixOp_1 = expression.getInfixOp();
        int _size_1 = _infixOp_1.size();
        boolean _greaterThan_1 = (_size_1 > 0);
        _and = _greaterThan_1;
      }
      if (_and) {
        {
          EList<SimpleExpression> _right_2 = expression.getRight();
          int _size_2 = _right_2.size();
          ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size_2, true);
          for(final Integer i : _doubleDotLessThan) {
            {
              if (((i).intValue() > 0)) {
                _builder.append("var left = ");
                _builder.append(varName, "");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
            EList<SimpleExpression> _right_3 = expression.getRight();
            SimpleExpression _get = _right_3.get((i).intValue());
            CharSequence _compileSimpleExpression_1 = this.compileSimpleExpression(_get, nestingLevel, "right");
            _builder.append(_compileSimpleExpression_1, "");
            _builder.newLineIfNotEmpty();
            EList<String> _infixOp_2 = expression.getInfixOp();
            String _get_1 = _infixOp_2.get((i).intValue());
            CharSequence _compileInfixOp = this.compileInfixOp(_get_1, varName);
            _builder.append(_compileInfixOp, "");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("var ");
        _builder.append(varName, "");
        _builder.append(" = left;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _and_3 = false;
      SimpleExpression _left_2 = expression.getLeft();
      boolean _notEquals_3 = (!Objects.equal(_left_2, null));
      if (!_notEquals_3) {
        _and_3 = false;
      } else {
        String _prefixNot = expression.getPrefixNot();
        boolean _notEquals_4 = (!Objects.equal(_prefixNot, null));
        _and_3 = _notEquals_4;
      }
      if (_and_3) {
        _builder.append("var ");
        _builder.append(varName, "");
        _builder.append(" = !");
        _builder.append(varName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compileInfixOp(final String infixOp, final String varName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ");
    _builder.append(varName, "");
    _builder.append(" = left\t");
    {
      boolean _equals = infixOp.equals("=");
      if (_equals) {
        _builder.append("==");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_1 = infixOp.equals("!=");
      if (_equals_1) {
        _builder.append("!=");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_2 = infixOp.equals(">");
      if (_equals_2) {
        _builder.append(">");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_3 = infixOp.equals("<");
      if (_equals_3) {
        _builder.append("<");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_4 = infixOp.equals(">=");
      if (_equals_4) {
        _builder.append(">=");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_5 = infixOp.equals("<=");
      if (_equals_5) {
        _builder.append("<=");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_6 = infixOp.equals("+");
      if (_equals_6) {
        _builder.append("+");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_7 = infixOp.equals("-");
      if (_equals_7) {
        _builder.append("-");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_8 = infixOp.equals("*");
      if (_equals_8) {
        _builder.append("*");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_9 = infixOp.equals("/");
      if (_equals_9) {
        _builder.append("/");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_10 = infixOp.equals("and");
      if (_equals_10) {
        _builder.append("&&");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _equals_11 = infixOp.equals("or");
      if (_equals_11) {
        _builder.append("||");
      }
    }
    _builder.append("right;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileSimpleExpression(final SimpleExpression expression, final int nestingLevel, final String varName) {
    CharSequence _xifexpression = null;
    String __string = expression.get_string();
    boolean _notEquals = (!Objects.equal(__string, null));
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("var ");
      _builder.append(varName, "");
      _builder.append(" = \'");
      String __string_1 = expression.get_string();
      _builder.append(__string_1, "");
      _builder.append("\';");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      String __double = expression.get_double();
      boolean _notEquals_1 = (!Objects.equal(__double, null));
      if (_notEquals_1) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("var ");
        _builder_1.append(varName, "");
        _builder_1.append(" = ");
        String __double_1 = expression.get_double();
        _builder_1.append(__double_1, "");
        _builder_1.append(";");
        _xifexpression_1 = _builder_1;
      } else {
        CharSequence _xifexpression_2 = null;
        String __boolean = expression.get_boolean();
        boolean _notEquals_2 = (!Objects.equal(__boolean, null));
        if (_notEquals_2) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("var ");
          _builder_2.append(varName, "");
          _builder_2.append(" = ");
          String __boolean_1 = expression.get_boolean();
          _builder_2.append(__boolean_1, "");
          _builder_2.append(";");
          _xifexpression_2 = _builder_2;
        } else {
          CharSequence _xifexpression_3 = null;
          String _isNull = expression.getIsNull();
          boolean _notEquals_3 = (!Objects.equal(_isNull, null));
          if (_notEquals_3) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("var ");
            _builder_3.append(varName, "");
            _builder_3.append(" = null;");
            _xifexpression_3 = _builder_3;
          } else {
            CharSequence _xifexpression_4 = null;
            Navig _navigation = expression.getNavigation();
            boolean _notEquals_4 = (!Objects.equal(_navigation, null));
            if (_notEquals_4) {
              CharSequence _xifexpression_5 = null;
              boolean _and = false;
              Navig _navigation_1 = expression.getNavigation();
              EList<Navigation> _navigation_2 = _navigation_1.getNavigation();
              boolean _notEquals_5 = (!Objects.equal(_navigation_2, null));
              if (!_notEquals_5) {
                _and = false;
              } else {
                Navig _navigation_3 = expression.getNavigation();
                EList<Navigation> _navigation_4 = _navigation_3.getNavigation();
                int _size = _navigation_4.size();
                boolean _notEquals_6 = (_size != 0);
                _and = _notEquals_6;
              }
              if (_and) {
                StringConcatenation _builder_4 = new StringConcatenation();
                Navig _navigation_5 = expression.getNavigation();
                String _attr = _navigation_5.getAttr();
                Navig _navigation_6 = expression.getNavigation();
                EList<Navigation> _navigation_7 = _navigation_6.getNavigation();
                CharSequence _compileNavigation = this.compileNavigation(_attr, _navigation_7, nestingLevel, varName);
                _builder_4.append(_compileNavigation, "");
                _xifexpression_5 = _builder_4;
              } else {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("var ");
                _builder_5.append(varName, "");
                _builder_5.append(" = ");
                Navig _navigation_8 = expression.getNavigation();
                String _attr_1 = _navigation_8.getAttr();
                _builder_5.append(_attr_1, "");
                _builder_5.append(";");
                _xifexpression_5 = _builder_5;
              }
              _xifexpression_4 = _xifexpression_5;
            } else {
              CharSequence _xifexpression_6 = null;
              IfSentence _ifSentence = expression.getIfSentence();
              boolean _notEquals_7 = (!Objects.equal(_ifSentence, null));
              if (_notEquals_7) {
                StringConcatenation _builder_6 = new StringConcatenation();
                IfSentence _ifSentence_1 = expression.getIfSentence();
                ComplexExpression _cond = _ifSentence_1.getCond();
                Object _compileComplexExpression = this.compileComplexExpression(_cond, nestingLevel, "condition");
                _builder_6.append(_compileComplexExpression, "");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t\t");
                _builder_6.append("if (condition){");
                _builder_6.newLine();
                _builder_6.append("\t\t\t\t\t");
                IfSentence _ifSentence_2 = expression.getIfSentence();
                ComplexExpression _body = _ifSentence_2.getBody();
                Object _compileComplexExpression_1 = this.compileComplexExpression(_body, nestingLevel, varName);
                _builder_6.append(_compileComplexExpression_1, "\t\t\t\t\t");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t\t");
                _builder_6.append("} else {");
                _builder_6.newLine();
                _builder_6.append("\t\t\t\t\t");
                IfSentence _ifSentence_3 = expression.getIfSentence();
                ComplexExpression _elsebody = _ifSentence_3.getElsebody();
                Object _compileComplexExpression_2 = this.compileComplexExpression(_elsebody, nestingLevel, varName);
                _builder_6.append(_compileComplexExpression_2, "\t\t\t\t\t");
                _builder_6.newLineIfNotEmpty();
                _builder_6.append("\t\t\t\t");
                _builder_6.append("}");
                _xifexpression_6 = _builder_6;
              } else {
                CharSequence _xifexpression_7 = null;
                String _colectionType = expression.getColectionType();
                boolean _notEquals_8 = (!Objects.equal(_colectionType, null));
                if (_notEquals_8) {
                  _xifexpression_7 = null;
                } else {
                  CharSequence _xifexpression_8 = null;
                  ResolveExp _resolve = expression.getResolve();
                  boolean _notEquals_9 = (!Objects.equal(_resolve, null));
                  if (_notEquals_9) {
                    StringConcatenation _builder_7 = new StringConcatenation();
                    ResolveExp _resolve_1 = expression.getResolve();
                    ComplexExpression _exp = _resolve_1.getExp();
                    Object _compileComplexExpression_3 = this.compileComplexExpression(_exp, nestingLevel, varName);
                    _builder_7.append(_compileComplexExpression_3, "");
                    _builder_7.newLineIfNotEmpty();
                    _builder_7.append("\t\t\t\t");
                    _builder_7.append("var ");
                    _builder_7.append(varName, "\t\t\t\t");
                    _builder_7.append(" = self.resolve(");
                    _builder_7.append(varName, "\t\t\t\t");
                    _builder_7.append(", ");
                    ResolveExp _resolve_2 = expression.getResolve();
                    int _position = _resolve_2.getPosition();
                    _builder_7.append(_position, "\t\t\t\t");
                    _builder_7.append(");");
                    _xifexpression_8 = _builder_7;
                  } else {
                    StringConcatenation _builder_8 = new StringConcatenation();
                    _builder_8.append("var ");
                    _builder_8.append(varName, "");
                    _builder_8.append(" = ");
                    int __integer = expression.get_integer();
                    _builder_8.append(__integer, "");
                    _builder_8.append(";");
                    _xifexpression_8 = _builder_8;
                  }
                  _xifexpression_7 = _xifexpression_8;
                }
                _xifexpression_6 = _xifexpression_7;
              }
              _xifexpression_4 = _xifexpression_6;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence compileNavigation(final String attr, final EList<Navigation> navAttr, final int nestingLevel, final String varName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _notEquals = (!Objects.equal(navAttr, null));
      if (_notEquals) {
        {
          Navigation _get = navAttr.get(0);
          boolean _notEquals_1 = (!Objects.equal(_get, null));
          if (_notEquals_1) {
            {
              boolean _or = false;
              Navigation _get_1 = navAttr.get(0);
              OCLOperationType1 _opType1 = _get_1.getOpType1();
              boolean _equals = Objects.equal(_opType1, null);
              if (_equals) {
                _or = true;
              } else {
                Navigation _get_2 = navAttr.get(0);
                OCLOperationType1 _opType1_1 = _get_2.getOpType1();
                String _allIns = _opType1_1.getAllIns();
                boolean _equals_1 = Objects.equal(_allIns, null);
                _or = _equals_1;
              }
              if (_or) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = ");
                _builder.append(attr, "");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    {
      int _size = navAttr.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        {
          Navigation _get_3 = navAttr.get((i).intValue());
          String _attName = _get_3.getAttName();
          boolean _notEquals_2 = (!Objects.equal(_attName, null));
          if (_notEquals_2) {
            _builder.append("var nav");
            _builder.append(nestingLevel, "");
            _builder.append(" = self.core.getAttribute(nav");
            _builder.append(nestingLevel, "");
            _builder.append(", \'");
            Navigation _get_4 = navAttr.get((i).intValue());
            String _attName_1 = _get_4.getAttName();
            _builder.append(_attName_1, "");
            _builder.append("\');");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          Navigation _get_5 = navAttr.get((i).intValue());
          AssocRoleName _assocRole = _get_5.getAssocRole();
          boolean _notEquals_3 = (!Objects.equal(_assocRole, null));
          if (_notEquals_3) {
            {
              Navigation _get_6 = navAttr.get((i).intValue());
              AssocRoleName _assocRole_1 = _get_6.getAssocRole();
              String _name = _assocRole_1.getName();
              boolean _notEquals_4 = (!Objects.equal(_name, null));
              if (_notEquals_4) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = self.navigateToNode(nav");
                _builder.append(nestingLevel, "");
                _builder.append(", \'");
                Navigation _get_7 = navAttr.get((i).intValue());
                AssocRoleName _assocRole_2 = _get_7.getAssocRole();
                String _name_1 = _assocRole_2.getName();
                _builder.append(_name_1, "");
                _builder.append("\');");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_8 = navAttr.get((i).intValue());
              AssocRoleName _assocRole_3 = _get_8.getAssocRole();
              String _children = _assocRole_3.getChildren();
              boolean _notEquals_5 = (!Objects.equal(_children, null));
              if (_notEquals_5) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = self.getChildren(nav");
                _builder.append(nestingLevel, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_9 = navAttr.get((i).intValue());
              AssocRoleName _assocRole_4 = _get_9.getAssocRole();
              String _parent = _assocRole_4.getParent();
              boolean _notEquals_6 = (!Objects.equal(_parent, null));
              if (_notEquals_6) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = self.core.getParent(nav");
                _builder.append(nestingLevel, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          Navigation _get_10 = navAttr.get((i).intValue());
          OCLOperationType1 _opType1_2 = _get_10.getOpType1();
          boolean _notEquals_7 = (!Objects.equal(_opType1_2, null));
          if (_notEquals_7) {
            {
              Navigation _get_11 = navAttr.get((i).intValue());
              OCLOperationType1 _opType1_3 = _get_11.getOpType1();
              String _allIns_1 = _opType1_3.getAllIns();
              boolean _notEquals_8 = (!Objects.equal(_allIns_1, null));
              if (_notEquals_8) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = [];");
                _builder.newLineIfNotEmpty();
                _builder.append("for (var k in self.pathToNode){");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("var ele = self.pathToNode[k];");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("if (self.isMetaTypeOf(ele, self.META[\'");
                _builder.append(attr, "\t                    ");
                _builder.append("\']) === true) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                    \t");
                _builder.append("nav");
                _builder.append(nestingLevel, "\t                    \t");
                _builder.append(".push(ele);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t                ");
                _builder.append("}");
                _builder.newLine();
              }
            }
            {
              Navigation _get_12 = navAttr.get((i).intValue());
              OCLOperationType1 _opType1_4 = _get_12.getOpType1();
              IsTypeOfOp _isTypeOf = _opType1_4.getIsTypeOf();
              boolean _notEquals_9 = (!Objects.equal(_isTypeOf, null));
              if (_notEquals_9) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = self.isMetaTypeOf(");
                _builder.append(attr, "");
                _builder.append(", self.META[\'");
                Navigation _get_13 = navAttr.get((i).intValue());
                OCLOperationType1 _opType1_5 = _get_13.getOpType1();
                IsTypeOfOp _isTypeOf_1 = _opType1_5.getIsTypeOf();
                String _className = _isTypeOf_1.getClassName();
                _builder.append(_className, "");
                _builder.append("\']) === true; ");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_14 = navAttr.get((i).intValue());
              OCLOperationType1 _opType1_6 = _get_14.getOpType1();
              String _toString = _opType1_6.getToString();
              boolean _notEquals_10 = (!Objects.equal(_toString, null));
              if (_notEquals_10) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "");
                _builder.append(".toString(); ");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_15 = navAttr.get((i).intValue());
              OCLOperationType1 _opType1_7 = _get_15.getOpType1();
              ConcatOp _concatenate = _opType1_7.getConcatenate();
              boolean _notEquals_11 = (!Objects.equal(_concatenate, null));
              if (_notEquals_11) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "");
                _builder.append(" + \'");
                Navigation _get_16 = navAttr.get((i).intValue());
                OCLOperationType1 _opType1_8 = _get_16.getOpType1();
                ConcatOp _concatenate_1 = _opType1_8.getConcatenate();
                String _s = _concatenate_1.getS();
                _builder.append(_s, "");
                _builder.append("\'; ");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          Navigation _get_17 = navAttr.get((i).intValue());
          OCLOperationType2 _opType2 = _get_17.getOpType2();
          boolean _notEquals_12 = (!Objects.equal(_opType2, null));
          if (_notEquals_12) {
            {
              Navigation _get_18 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_1 = _get_18.getOpType2();
              String _first = _opType2_1.getFirst();
              boolean _notEquals_13 = (!Objects.equal(_first, null));
              if (_notEquals_13) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "");
                _builder.append("[0];");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_19 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_2 = _get_19.getOpType2();
              String _size_1 = _opType2_2.getSize();
              boolean _notEquals_14 = (!Objects.equal(_size_1, null));
              if (_notEquals_14) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "");
                _builder.append(".length;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_20 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_3 = _get_20.getOpType2();
              String _last = _opType2_3.getLast();
              boolean _notEquals_15 = (!Objects.equal(_last, null));
              if (_notEquals_15) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav[nav");
                _builder.append(nestingLevel, "");
                _builder.append(".length-1];");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_21 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_4 = _get_21.getOpType2();
              IndexOfOp _indexOf = _opType2_4.getIndexOf();
              boolean _notEquals_16 = (!Objects.equal(_indexOf, null));
              if (_notEquals_16) {
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "");
                _builder.append("[");
                Navigation _get_22 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_5 = _get_22.getOpType2();
                IndexOfOp _indexOf_1 = _opType2_5.getIndexOf();
                int _index = _indexOf_1.getIndex();
                _builder.append(_index, "");
                _builder.append("];");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_23 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_6 = _get_23.getOpType2();
              UnionOp _union = _opType2_6.getUnion();
              boolean _notEquals_17 = (!Objects.equal(_union, null));
              if (_notEquals_17) {
                Navigation _get_24 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_7 = _get_24.getOpType2();
                UnionOp _union_1 = _opType2_7.getUnion();
                ComplexExpression _exp = _union_1.getExp();
                Object _compileComplexExpression = this.compileComplexExpression(_exp, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression, "");
                _builder.newLineIfNotEmpty();
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = new Set(nav");
                _builder.append(nestingLevel, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                ");
                _builder.append("for (var k in exp){");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("if (!nav");
                _builder.append(nestingLevel, "\t                    ");
                _builder.append(".has(k)){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                       ");
                _builder.append("nav");
                _builder.append(nestingLevel, "\t                       ");
                _builder.append(".add(k);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t                ");
                _builder.append("}");
                _builder.newLine();
              }
            }
            {
              Navigation _get_25 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_8 = _get_25.getOpType2();
              IntersectionOp _intersection = _opType2_8.getIntersection();
              boolean _notEquals_18 = (!Objects.equal(_intersection, null));
              if (_notEquals_18) {
                Navigation _get_26 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_9 = _get_26.getOpType2();
                IntersectionOp _intersection_1 = _opType2_9.getIntersection();
                ComplexExpression _exp_1 = _intersection_1.getExp();
                Object _compileComplexExpression_1 = this.compileComplexExpression(_exp_1, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression_1, "");
                _builder.newLineIfNotEmpty();
                _builder.append("var intersect = new Set();");
                _builder.newLine();
                _builder.append("\t                ");
                _builder.append("for (var k in exp){");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("if (nav");
                _builder.append(nestingLevel, "\t                    ");
                _builder.append(".has(k)){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t                       ");
                _builder.append("intersect.add(k);");
                _builder.newLine();
                _builder.append("\t                    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t                ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t                ");
                _builder.append("var nav");
                _builder.append(nestingLevel, "\t                ");
                _builder.append(" = intersect;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_27 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_10 = _get_27.getOpType2();
              ForAllOp _forall = _opType2_10.getForall();
              boolean _notEquals_19 = (!Objects.equal(_forall, null));
              if (_notEquals_19) {
                _builder.append("var forall = true;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("var j = 0;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("while (forall && j<nav");
                _builder.append(nestingLevel, "                    ");
                _builder.append(".length){");
                _builder.newLineIfNotEmpty();
                _builder.append("                    \t");
                _builder.append("var ");
                Navigation _get_28 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_11 = _get_28.getOpType2();
                ForAllOp _forall_1 = _opType2_11.getForall();
                String _var = _forall_1.getVar();
                _builder.append(_var, "                    \t");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "                    \t");
                _builder.append("[j];");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Navigation _get_29 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_12 = _get_29.getOpType2();
                ForAllOp _forall_2 = _opType2_12.getForall();
                ComplexExpression _exp_2 = _forall_2.getExp();
                Object _compileComplexExpression_2 = this.compileComplexExpression(_exp_2, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression_2, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("forall = exp;");
                _builder.newLine();
                _builder.append("                        ");
                _builder.append("j++;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = forall;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_30 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_13 = _get_30.getOpType2();
              ExistsOp _exists = _opType2_13.getExists();
              boolean _notEquals_20 = (!Objects.equal(_exists, null));
              if (_notEquals_20) {
                _builder.append("var found = false;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("var j = 0;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("while (!found && j<nav");
                _builder.append(nestingLevel, "                    ");
                _builder.append(".length){");
                _builder.newLineIfNotEmpty();
                _builder.append("                    \t");
                _builder.append("var ");
                Navigation _get_31 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_14 = _get_31.getOpType2();
                ExistsOp _exists_1 = _opType2_14.getExists();
                String _var_1 = _exists_1.getVar();
                _builder.append(_var_1, "                    \t");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "                    \t");
                _builder.append("[j];");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Navigation _get_32 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_15 = _get_32.getOpType2();
                ExistsOp _exists_2 = _opType2_15.getExists();
                ComplexExpression _exp_3 = _exists_2.getExp();
                Object _compileComplexExpression_3 = this.compileComplexExpression(_exp_3, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression_3, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("found = exp;");
                _builder.newLine();
                _builder.append("                        ");
                _builder.append("j++;");
                _builder.newLine();
                _builder.append("                    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = found;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_33 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_16 = _get_33.getOpType2();
              SelectOp _select = _opType2_16.getSelect();
              boolean _notEquals_21 = (!Objects.equal(_select, null));
              if (_notEquals_21) {
                _builder.append("var select = [];");
                _builder.newLine();
                _builder.append("for (var i");
                Navigation _get_34 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_17 = _get_34.getOpType2();
                SelectOp _select_1 = _opType2_17.getSelect();
                String _var_2 = _select_1.getVar();
                _builder.append(_var_2, "");
                _builder.append(" = 0; i");
                Navigation _get_35 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_18 = _get_35.getOpType2();
                SelectOp _select_2 = _opType2_18.getSelect();
                String _var_3 = _select_2.getVar();
                _builder.append(_var_3, "");
                _builder.append(" < nav");
                _builder.append(nestingLevel, "");
                _builder.append(".length; i");
                Navigation _get_36 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_19 = _get_36.getOpType2();
                SelectOp _select_3 = _opType2_19.getSelect();
                String _var_4 = _select_3.getVar();
                _builder.append(_var_4, "");
                _builder.append(" += 1) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("var ");
                Navigation _get_37 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_20 = _get_37.getOpType2();
                SelectOp _select_4 = _opType2_20.getSelect();
                String _var_5 = _select_4.getVar();
                _builder.append(_var_5, "\t");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "\t");
                _builder.append("[i");
                Navigation _get_38 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_21 = _get_38.getOpType2();
                SelectOp _select_5 = _opType2_21.getSelect();
                String _var_6 = _select_5.getVar();
                _builder.append(_var_6, "\t");
                _builder.append("];");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Navigation _get_39 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_22 = _get_39.getOpType2();
                SelectOp _select_6 = _opType2_22.getSelect();
                ComplexExpression _exp_4 = _select_6.getExp();
                Object _compileComplexExpression_4 = this.compileComplexExpression(_exp_4, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression_4, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("if (exp){");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("select.push(");
                Navigation _get_40 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_23 = _get_40.getOpType2();
                SelectOp _select_7 = _opType2_23.getSelect();
                String _var_7 = _select_7.getVar();
                _builder.append(_var_7, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = select;");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Navigation _get_41 = navAttr.get((i).intValue());
              OCLOperationType2 _opType2_24 = _get_41.getOpType2();
              CollectOp _collect = _opType2_24.getCollect();
              boolean _notEquals_22 = (!Objects.equal(_collect, null));
              if (_notEquals_22) {
                _builder.append("var collect = [];");
                _builder.newLine();
                _builder.append("for (var i");
                Navigation _get_42 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_25 = _get_42.getOpType2();
                CollectOp _collect_1 = _opType2_25.getCollect();
                String _var_8 = _collect_1.getVar();
                _builder.append(_var_8, "");
                _builder.append(" = 0; i");
                Navigation _get_43 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_26 = _get_43.getOpType2();
                CollectOp _collect_2 = _opType2_26.getCollect();
                String _var_9 = _collect_2.getVar();
                _builder.append(_var_9, "");
                _builder.append(" < nav");
                _builder.append(nestingLevel, "");
                _builder.append(".length; i");
                Navigation _get_44 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_27 = _get_44.getOpType2();
                CollectOp _collect_3 = _opType2_27.getCollect();
                String _var_10 = _collect_3.getVar();
                _builder.append(_var_10, "");
                _builder.append(" += 1) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("var ");
                Navigation _get_45 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_28 = _get_45.getOpType2();
                CollectOp _collect_4 = _opType2_28.getCollect();
                String _var_11 = _collect_4.getVar();
                _builder.append(_var_11, "\t");
                _builder.append(" = nav");
                _builder.append(nestingLevel, "\t");
                _builder.append("[i");
                Navigation _get_46 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_29 = _get_46.getOpType2();
                CollectOp _collect_5 = _opType2_29.getCollect();
                String _var_12 = _collect_5.getVar();
                _builder.append(_var_12, "\t");
                _builder.append("];");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                Navigation _get_47 = navAttr.get((i).intValue());
                OCLOperationType2 _opType2_30 = _get_47.getOpType2();
                CollectOp _collect_6 = _opType2_30.getCollect();
                ComplexExpression _exp_5 = _collect_6.getExp();
                Object _compileComplexExpression_5 = this.compileComplexExpression(_exp_5, (nestingLevel + 1), "exp");
                _builder.append(_compileComplexExpression_5, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("collect.push(exp);");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
                _builder.append("var nav");
                _builder.append(nestingLevel, "");
                _builder.append(" = collect;");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("var ");
    _builder.append(varName, "");
    _builder.append(" = nav");
    _builder.append(nestingLevel, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence writeMTMethods() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("modeltransformation.prototype.addChild = function (node, childNode, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/** Given an source element, this method returns the element created from it in the position specified in the second parameter */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.core.moveNode(childNode, node);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.addChildren = function (node, childNodes, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/** Given an source element, this method returns the element created from it in the position specified in the second parameter */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (var ii = 0; ii < childNodes.length; ii += 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("self.core.moveNode(childNodes[ii], node);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.setParent = function (node, parentNode, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/** Given an source element, this method returns the element created from it in the position specified in the second parameter */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.core.moveNode(node, parentNode);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.resolve = function (sourceNode, position, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/** Given an source element, this method returns the element created from it in the position specified in the second parameter */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return self.trgElements[self.traces[self.core.getPath(sourceNode) + \'-\' + position].trgElementId];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.navigateToNode = function (sourceNode, pointerName, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("pointerPath,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("targetNode;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pointerPath = self.core.getPointerPath(sourceNode, pointerName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("targetNode = self.pathToNode[pointerPath];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return targetNode;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.getChildrenPaths = function (node, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nodesPath;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("nodesPath = this.core.getChildrenPaths(node);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return nodesPath;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.getChildren = function (node, callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("childrenPath,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("i,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("children = [];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("childrenPath = this.core.getChildrenPaths(node);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (i = 0; i < childrenPath.length; i += 1) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("children.push(self.pathToNode[childrenPath[i]]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return children;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("modeltransformation.prototype.extractDataModel = function (callback) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var self = this;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// In order to avoid multiple iterative asynchronous \'load\' calls we pre-load all the nodes in the family");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// and build up a local hash-map where the keys are the path/id of the nodes and the value the (nodes) objects");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// themselves. The info is stored in self.pathToNode");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.core.loadSubTree(self.activeNode)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".then(function (nodes) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("var i,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("childNode,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("childName,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("childrenPaths;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (i = 0; i < nodes.length; i += 1) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// For each node in the subtree we get the path and use it for the index of the hash-map, where");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// values are the actual node.");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("})");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".nodeify(callback);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    return _builder;
  }
}
