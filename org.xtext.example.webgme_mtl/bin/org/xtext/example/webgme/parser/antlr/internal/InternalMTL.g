/*
* generated by Xtext
*/
grammar InternalMTL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.webgme.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.webgme.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.webgme.services.MTLGrammarAccess;

}

@parser::members {

 	private MTLGrammarAccess grammarAccess;
 	
    public InternalMTLParser(TokenStream input, MTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); 
	    }
		lv_rules_0_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_0_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFromKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getInPatternsInPatternParserRuleCall_4_0()); 
	    }
		lv_inPatterns_4_0=ruleInPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"inPatterns",
        		lv_inPatterns_4_0, 
        		"InPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getLeftParenthesisKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getFilterFilterParserRuleCall_5_1_0()); 
	    }
		lv_filter_6_0=ruleFilter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_6_0, 
        		"Filter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getRightParenthesisKeyword_5_2());
    }
)?	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getToKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getOutPatternsOutPatternParserRuleCall_7_0()); 
	    }
		lv_outPatterns_9_0=ruleOutPattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"outPatterns",
        		lv_outPatterns_9_0, 
        		"OutPattern");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleInPattern
entryRuleInPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInPatternRule()); }
	 iv_ruleInPattern=ruleInPattern 
	 { $current=$iv_ruleInPattern.current; } 
	 EOF 
;

// Rule InPattern
ruleInPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inElem_0_0=RULE_ID
		{
			newLeafNode(lv_inElem_0_0, grammarAccess.getInPatternAccess().getInElemIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"inElem",
        		lv_inElem_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInPatternAccess().getColonKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getInPatternAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	 iv_ruleFilter=ruleFilter 
	 { $current=$iv_ruleFilter.current; } 
	 EOF 
;

// Rule Filter
ruleFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterAccess().getExprComplexExpressionParserRuleCall_0()); 
	    }
		lv_expr_0_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOutPattern
entryRuleOutPattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutPatternRule()); }
	 iv_ruleOutPattern=ruleOutPattern 
	 { $current=$iv_ruleOutPattern.current; } 
	 EOF 
;

// Rule OutPattern
ruleOutPattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_varName_0_0=RULE_ID
		{
			newLeafNode(lv_varName_0_0, grammarAccess.getOutPatternAccess().getVarNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutPatternAccess().getColonKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getOutPatternAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOutPatternAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutPatternAccess().getAssgAssignationParserRuleCall_4_0()); 
	    }
		lv_assg_4_0=ruleAssignation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutPatternRule());
	        }
       		add(
       			$current, 
       			"assg",
        		lv_assg_4_0, 
        		"Assignation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOutPatternAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleAssignation
entryRuleAssignation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignationRule()); }
	 iv_ruleAssignation=ruleAssignation 
	 { $current=$iv_ruleAssignation.current; } 
	 EOF 
;

// Rule Assignation
ruleAssignation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_attribute_0_0=RULE_ID
		{
			newLeafNode(lv_attribute_0_0, grammarAccess.getAssignationAccess().getAttributeIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attribute",
        		lv_attribute_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignationAccess().getLessThanSignHyphenMinusKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignationAccess().getExprComplexExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignationAccess().getRelationshipAssocRoleNameParserRuleCall_1_0_0()); 
	    }
		lv_relationship_3_0=ruleAssocRoleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignationRule());
	        }
       		set(
       			$current, 
       			"relationship",
        		lv_relationship_3_0, 
        		"AssocRoleName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='<-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignationAccess().getLessThanSignHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignationAccess().getExprComplexExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expr_5_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current; } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv__string_0_0=RULE_STRING
		{
			newLeafNode(lv__string_0_0, grammarAccess.getSimpleExpressionAccess().get_stringSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"_string",
        		lv__string_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv__integer_1_0=RULE_INT
		{
			newLeafNode(lv__integer_1_0, grammarAccess.getSimpleExpressionAccess().get_integerINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"_integer",
        		lv__integer_1_0, 
        		"INT");
	    }

)
)
    |(
(
		lv__double_2_0=RULE_DOUBLE
		{
			newLeafNode(lv__double_2_0, grammarAccess.getSimpleExpressionAccess().get_doubleDOUBLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"_double",
        		lv__double_2_0, 
        		"DOUBLE");
	    }

)
)
    |(
(
		lv__boolean_3_0=RULE_BOOLEAN
		{
			newLeafNode(lv__boolean_3_0, grammarAccess.getSimpleExpressionAccess().get_booleanBOOLEANTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"_boolean",
        		lv__boolean_3_0, 
        		"BOOLEAN");
	    }

)
)
    |(
(
		lv_isNull_4_0=	'null' 
    {
        newLeafNode(lv_isNull_4_0, grammarAccess.getSimpleExpressionAccess().getIsNullNullKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed($current, "isNull", lv_isNull_4_0, "null");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getNavigationNavigParserRuleCall_5_0()); 
	    }
		lv_navigation_5_0=ruleNavig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"navigation",
        		lv_navigation_5_0, 
        		"Navig");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getIfSentenceIfSentenceParserRuleCall_6_0()); 
	    }
		lv_ifSentence_6_0=ruleIfSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"ifSentence",
        		lv_ifSentence_6_0, 
        		"IfSentence");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getColectionTypeCollectionTypeParserRuleCall_7_0_0()); 
	    }
		lv_colectionType_7_0=ruleCollectionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"colectionType",
        		lv_colectionType_7_0, 
        		"CollectionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleExpressionAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getElemsComplexExpressionParserRuleCall_7_2_0()); 
	    }
		lv_elems_9_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_9_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleExpressionAccess().getRightCurlyBracketKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getNavNavigationParserRuleCall_7_4_0()); 
	    }
		lv_nav_11_0=ruleNavigation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		add(
       			$current, 
       			"nav",
        		lv_nav_11_0, 
        		"Navigation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getResolveResolveExpParserRuleCall_8_0()); 
	    }
		lv_resolve_12_0=ruleResolveExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"resolve",
        		lv_resolve_12_0, 
        		"ResolveExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNavig
entryRuleNavig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNavigRule()); }
	 iv_ruleNavig=ruleNavig 
	 { $current=$iv_ruleNavig.current; } 
	 EOF 
;

// Rule Navig
ruleNavig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attr_0_0=RULE_ID
		{
			newLeafNode(lv_attr_0_0, grammarAccess.getNavigAccess().getAttrIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNavigRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attr",
        		lv_attr_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNavigAccess().getNavigationNavigationParserRuleCall_1_0()); 
	    }
		lv_navigation_1_0=ruleNavigation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNavigRule());
	        }
       		add(
       			$current, 
       			"navigation",
        		lv_navigation_1_0, 
        		"Navigation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNavigation
entryRuleNavigation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNavigationRule()); }
	 iv_ruleNavigation=ruleNavigation 
	 { $current=$iv_ruleNavigation.current; } 
	 EOF 
;

// Rule Navigation
ruleNavigation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNavigationAccess().getFullStopKeyword_0_0());
    }
(
(
		lv_attName_1_0=RULE_ID
		{
			newLeafNode(lv_attName_1_0, grammarAccess.getNavigationAccess().getAttNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNavigationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attName",
        		lv_attName_1_0, 
        		"ID");
	    }

)
))
    |(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNavigationAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNavigationAccess().getAssocRoleAssocRoleNameParserRuleCall_1_1_0()); 
	    }
		lv_assocRole_3_0=ruleAssocRoleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNavigationRule());
	        }
       		set(
       			$current, 
       			"assocRole",
        		lv_assocRole_3_0, 
        		"AssocRoleName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNavigationAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNavigationAccess().getOpType1OCLOperationType1ParserRuleCall_2_1_0()); 
	    }
		lv_opType1_5_0=ruleOCLOperationType1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNavigationRule());
	        }
       		set(
       			$current, 
       			"opType1",
        		lv_opType1_5_0, 
        		"OCLOperationType1");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNavigationAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNavigationAccess().getOpType2OCLOperationType2ParserRuleCall_3_1_0()); 
	    }
		lv_opType2_7_0=ruleOCLOperationType2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNavigationRule());
	        }
       		set(
       			$current, 
       			"opType2",
        		lv_opType2_7_0, 
        		"OCLOperationType2");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleIfSentence
entryRuleIfSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfSentenceRule()); }
	 iv_ruleIfSentence=ruleIfSentence 
	 { $current=$iv_ruleIfSentence.current; } 
	 EOF 
;

// Rule IfSentence
ruleIfSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfSentenceAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfSentenceAccess().getCondComplexExpressionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfSentenceRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfSentenceAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfSentenceAccess().getBodyComplexExpressionParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfSentenceRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfSentenceAccess().getElseKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfSentenceAccess().getElsebodyComplexExpressionParserRuleCall_5_0()); 
	    }
		lv_elsebody_5_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfSentenceRule());
	        }
       		set(
       			$current, 
       			"elsebody",
        		lv_elsebody_5_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='endif' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfSentenceAccess().getEndifKeyword_6());
    }
)
;





// Entry rule entryRuleResolveExp
entryRuleResolveExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResolveExpRule()); }
	 iv_ruleResolveExp=ruleResolveExp 
	 { $current=$iv_ruleResolveExp.current; } 
	 EOF 
;

// Rule ResolveExp
ruleResolveExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='resolve' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResolveExpAccess().getResolveKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResolveExpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResolveExpAccess().getExpComplexExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResolveExpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResolveExpAccess().getCommaKeyword_3_0());
    }
(
(
		lv_position_4_0=RULE_INT
		{
			newLeafNode(lv_position_4_0, grammarAccess.getResolveExpAccess().getPositionINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResolveExpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"position",
        		lv_position_4_0, 
        		"INT");
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResolveExpAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleComplexExpression
entryRuleComplexExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexExpressionRule()); }
	 iv_ruleComplexExpression=ruleComplexExpression 
	 { $current=$iv_ruleComplexExpression.current; } 
	 EOF 
;

// Rule ComplexExpression
ruleComplexExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_prefixNot_0_0=	'not' 
    {
        newLeafNode(lv_prefixNot_0_0, grammarAccess.getComplexExpressionAccess().getPrefixNotNotKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexExpressionRule());
	        }
       		setWithLastConsumed($current, "prefixNot", lv_prefixNot_0_0, "not");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComplexExpressionAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getLeftSimpleExpressionParserRuleCall_0_2_0()); 
	    }
		lv_left_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getInfixOpInfixPrimitiveOperatorParserRuleCall_0_3_0_0()); 
	    }
		lv_infixOp_3_0=ruleInfixPrimitiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		add(
       			$current, 
       			"infixOp",
        		lv_infixOp_3_0, 
        		"InfixPrimitiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getRightSimpleExpressionParserRuleCall_0_3_1_0()); 
	    }
		lv_right_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComplexExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getLeftSimpleExpressionParserRuleCall_1_0_0()); 
	    }
		lv_left_6_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_6_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getInfixOpInfixPrimitiveOperatorParserRuleCall_1_1_0_0()); 
	    }
		lv_infixOp_7_0=ruleInfixPrimitiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		add(
       			$current, 
       			"infixOp",
        		lv_infixOp_7_0, 
        		"InfixPrimitiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexExpressionAccess().getRightSimpleExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_right_8_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexExpressionRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleAssocRoleName
entryRuleAssocRoleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssocRoleNameRule()); }
	 iv_ruleAssocRoleName=ruleAssocRoleName 
	 { $current=$iv_ruleAssocRoleName.current; } 
	 EOF 
;

// Rule AssocRoleName
ruleAssocRoleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_children_0_0=	'children()' 
    {
        newLeafNode(lv_children_0_0, grammarAccess.getAssocRoleNameAccess().getChildrenChildrenKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssocRoleNameRule());
	        }
       		setWithLastConsumed($current, "children", lv_children_0_0, "children()");
	    }

)
)
    |(
(
		lv_parent_1_0=	'parent()' 
    {
        newLeafNode(lv_parent_1_0, grammarAccess.getAssocRoleNameAccess().getParentParentKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssocRoleNameRule());
	        }
       		setWithLastConsumed($current, "parent", lv_parent_1_0, "parent()");
	    }

)
)
    |((
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAssocRoleNameAccess().getNameIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssocRoleNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='()' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssocRoleNameAccess().getLeftParenthesisRightParenthesisKeyword_2_1());
    }
))
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); } 
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current.getText(); }  
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeAccess().getSetKeyword_0()); 
    }

    |
	kw='Sequence' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeAccess().getSequenceKeyword_1()); 
    }

    |
	kw='Bag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeAccess().getBagKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleOCLOperationType1
entryRuleOCLOperationType1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOCLOperationType1Rule()); }
	 iv_ruleOCLOperationType1=ruleOCLOperationType1 
	 { $current=$iv_ruleOCLOperationType1.current; } 
	 EOF 
;

// Rule OCLOperationType1
ruleOCLOperationType1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType1Access().getAllInsAllInstancesOpParserRuleCall_0_0()); 
	    }
		lv_allIns_0_0=ruleAllInstancesOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType1Rule());
	        }
       		set(
       			$current, 
       			"allIns",
        		lv_allIns_0_0, 
        		"AllInstancesOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType1Access().getIsTypeOfIsTypeOfOpParserRuleCall_1_0()); 
	    }
		lv_isTypeOf_1_0=ruleIsTypeOfOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType1Rule());
	        }
       		set(
       			$current, 
       			"isTypeOf",
        		lv_isTypeOf_1_0, 
        		"IsTypeOfOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType1Access().getToStringToStringOpParserRuleCall_2_0()); 
	    }
		lv_toString_2_0=ruleToStringOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType1Rule());
	        }
       		set(
       			$current, 
       			"toString",
        		lv_toString_2_0, 
        		"ToStringOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType1Access().getConcatenateConcatOpParserRuleCall_3_0()); 
	    }
		lv_concatenate_3_0=ruleConcatOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType1Rule());
	        }
       		set(
       			$current, 
       			"concatenate",
        		lv_concatenate_3_0, 
        		"ConcatOp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOCLOperationType2
entryRuleOCLOperationType2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOCLOperationType2Rule()); }
	 iv_ruleOCLOperationType2=ruleOCLOperationType2 
	 { $current=$iv_ruleOCLOperationType2.current; } 
	 EOF 
;

// Rule OCLOperationType2
ruleOCLOperationType2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getSizeSizeOpParserRuleCall_0_0()); 
	    }
		lv_size_0_0=ruleSizeOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_0_0, 
        		"SizeOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getForallForAllOpParserRuleCall_1_0()); 
	    }
		lv_forall_1_0=ruleForAllOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"forall",
        		lv_forall_1_0, 
        		"ForAllOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getExistsExistsOpParserRuleCall_2_0()); 
	    }
		lv_exists_2_0=ruleExistsOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"exists",
        		lv_exists_2_0, 
        		"ExistsOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getSelectSelectOpParserRuleCall_3_0()); 
	    }
		lv_select_3_0=ruleSelectOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"select",
        		lv_select_3_0, 
        		"SelectOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getCollectCollectOpParserRuleCall_4_0()); 
	    }
		lv_collect_4_0=ruleCollectOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"collect",
        		lv_collect_4_0, 
        		"CollectOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getFirstFirstOpParserRuleCall_5_0()); 
	    }
		lv_first_5_0=ruleFirstOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_5_0, 
        		"FirstOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getLastLastOpParserRuleCall_6_0()); 
	    }
		lv_last_6_0=ruleLastOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"last",
        		lv_last_6_0, 
        		"LastOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getIndexOfIndexOfOpParserRuleCall_7_0()); 
	    }
		lv_indexOf_7_0=ruleIndexOfOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"indexOf",
        		lv_indexOf_7_0, 
        		"IndexOfOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getUnionUnionOpParserRuleCall_8_0()); 
	    }
		lv_union_8_0=ruleUnionOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"union",
        		lv_union_8_0, 
        		"UnionOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getIntersectionIntersectionOpParserRuleCall_9_0()); 
	    }
		lv_intersection_9_0=ruleIntersectionOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"intersection",
        		lv_intersection_9_0, 
        		"IntersectionOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOCLOperationType2Access().getIsUndefinedIsUndefinedOpParserRuleCall_10_0()); 
	    }
		lv_isUndefined_10_0=ruleIsUndefinedOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOCLOperationType2Rule());
	        }
       		set(
       			$current, 
       			"isUndefined",
        		lv_isUndefined_10_0, 
        		"IsUndefinedOp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInfixPrimitiveOperator
entryRuleInfixPrimitiveOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInfixPrimitiveOperatorRule()); } 
	 iv_ruleInfixPrimitiveOperator=ruleInfixPrimitiveOperator 
	 { $current=$iv_ruleInfixPrimitiveOperator.current.getText(); }  
	 EOF 
;

// Rule InfixPrimitiveOperator
ruleInfixPrimitiveOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getLessThanSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getLessThanSignEqualsSignKeyword_5()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getPlusSignKeyword_6()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getHyphenMinusKeyword_7()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getAsteriskKeyword_8()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getSolidusKeyword_9()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getAndKeyword_10()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInfixPrimitiveOperatorAccess().getOrKeyword_11()); 
    }
)
    ;





// Entry rule entryRuleSizeOp
entryRuleSizeOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeOpRule()); } 
	 iv_ruleSizeOp=ruleSizeOp 
	 { $current=$iv_ruleSizeOp.current.getText(); }  
	 EOF 
;

// Rule SizeOp
ruleSizeOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='size' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSizeOpAccess().getSizeKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSizeOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleFirstOp
entryRuleFirstOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFirstOpRule()); } 
	 iv_ruleFirstOp=ruleFirstOp 
	 { $current=$iv_ruleFirstOp.current.getText(); }  
	 EOF 
;

// Rule FirstOp
ruleFirstOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='first' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFirstOpAccess().getFirstKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFirstOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleLastOp
entryRuleLastOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastOpRule()); } 
	 iv_ruleLastOp=ruleLastOp 
	 { $current=$iv_ruleLastOp.current.getText(); }  
	 EOF 
;

// Rule LastOp
ruleLastOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='last' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLastOpAccess().getLastKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLastOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIndexOfOp
entryRuleIndexOfOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexOfOpRule()); }
	 iv_ruleIndexOfOp=ruleIndexOfOp 
	 { $current=$iv_ruleIndexOfOp.current; } 
	 EOF 
;

// Rule IndexOfOp
ruleIndexOfOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='indexOf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndexOfOpAccess().getIndexOfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIndexOfOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_index_2_0=RULE_INT
		{
			newLeafNode(lv_index_2_0, grammarAccess.getIndexOfOpAccess().getIndexINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexOfOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIndexOfOpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAllInstancesOp
entryRuleAllInstancesOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllInstancesOpRule()); } 
	 iv_ruleAllInstancesOp=ruleAllInstancesOp 
	 { $current=$iv_ruleAllInstancesOp.current.getText(); }  
	 EOF 
;

// Rule AllInstancesOp
ruleAllInstancesOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='allInstances' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAllInstancesOpAccess().getAllInstancesKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAllInstancesOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleForAllOp
entryRuleForAllOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllOpRule()); }
	 iv_ruleForAllOp=ruleForAllOp 
	 { $current=$iv_ruleForAllOp.current; } 
	 EOF 
;

// Rule ForAllOp
ruleForAllOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='forAll' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllOpAccess().getForAllKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForAllOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var_2_0=RULE_ID
		{
			newLeafNode(lv_var_2_0, grammarAccess.getForAllOpAccess().getVarIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForAllOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ID");
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAllOpAccess().getVerticalLineKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllOpAccess().getExpComplexExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForAllOpAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleExistsOp
entryRuleExistsOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistsOpRule()); }
	 iv_ruleExistsOp=ruleExistsOp 
	 { $current=$iv_ruleExistsOp.current; } 
	 EOF 
;

// Rule ExistsOp
ruleExistsOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exists' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistsOpAccess().getExistsKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistsOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var_2_0=RULE_ID
		{
			newLeafNode(lv_var_2_0, grammarAccess.getExistsOpAccess().getVarIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExistsOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ID");
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExistsOpAccess().getVerticalLineKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsOpAccess().getExpComplexExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExistsOpAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleSelectOp
entryRuleSelectOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectOpRule()); }
	 iv_ruleSelectOp=ruleSelectOp 
	 { $current=$iv_ruleSelectOp.current; } 
	 EOF 
;

// Rule SelectOp
ruleSelectOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectOpAccess().getSelectKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var_2_0=RULE_ID
		{
			newLeafNode(lv_var_2_0, grammarAccess.getSelectOpAccess().getVarIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ID");
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectOpAccess().getVerticalLineKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectOpAccess().getExpComplexExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectOpAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleCollectOp
entryRuleCollectOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectOpRule()); }
	 iv_ruleCollectOp=ruleCollectOp 
	 { $current=$iv_ruleCollectOp.current; } 
	 EOF 
;

// Rule CollectOp
ruleCollectOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='collect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCollectOpAccess().getCollectKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_var_2_0=RULE_ID
		{
			newLeafNode(lv_var_2_0, grammarAccess.getCollectOpAccess().getVarIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ID");
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectOpAccess().getVerticalLineKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectOpAccess().getExpComplexExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectOpAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleIsTypeOfOp
entryRuleIsTypeOfOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsTypeOfOpRule()); }
	 iv_ruleIsTypeOfOp=ruleIsTypeOfOp 
	 { $current=$iv_ruleIsTypeOfOp.current; } 
	 EOF 
;

// Rule IsTypeOfOp
ruleIsTypeOfOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isTypeOf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsTypeOfOpAccess().getIsTypeOfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsTypeOfOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getIsTypeOfOpAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsTypeOfOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIsTypeOfOpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleToStringOp
entryRuleToStringOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getToStringOpRule()); } 
	 iv_ruleToStringOp=ruleToStringOp 
	 { $current=$iv_ruleToStringOp.current.getText(); }  
	 EOF 
;

// Rule ToStringOp
ruleToStringOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='toString' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToStringOpAccess().getToStringKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getToStringOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConcatOp
entryRuleConcatOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcatOpRule()); }
	 iv_ruleConcatOp=ruleConcatOp 
	 { $current=$iv_ruleConcatOp.current; } 
	 EOF 
;

// Rule ConcatOp
ruleConcatOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='concatenate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConcatOpAccess().getConcatenateKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConcatOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_s_2_0=RULE_STRING
		{
			newLeafNode(lv_s_2_0, grammarAccess.getConcatOpAccess().getSSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConcatOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"s",
        		lv_s_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConcatOpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleUnionOp
entryRuleUnionOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionOpRule()); }
	 iv_ruleUnionOp=ruleUnionOp 
	 { $current=$iv_ruleUnionOp.current; } 
	 EOF 
;

// Rule UnionOp
ruleUnionOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionOpAccess().getUnionKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionOpAccess().getExpComplexExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionOpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleIntersectionOp
entryRuleIntersectionOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntersectionOpRule()); }
	 iv_ruleIntersectionOp=ruleIntersectionOp 
	 { $current=$iv_ruleIntersectionOp.current; } 
	 EOF 
;

// Rule IntersectionOp
ruleIntersectionOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='intersection' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntersectionOpAccess().getIntersectionKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntersectionOpAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectionOpAccess().getExpComplexExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleComplexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectionOpRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"ComplexExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntersectionOpAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleIsUndefinedOp
entryRuleIsUndefinedOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsUndefinedOpRule()); } 
	 iv_ruleIsUndefinedOp=ruleIsUndefinedOp 
	 { $current=$iv_ruleIsUndefinedOp.current.getText(); }  
	 EOF 
;

// Rule IsUndefinedOp
ruleIsUndefinedOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='isUndefined' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIsUndefinedOpAccess().getIsUndefinedKeyword_0()); 
    }

	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIsUndefinedOpAccess().getLeftParenthesisRightParenthesisKeyword_1()); 
    }
)
    ;





RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ANY_OTHER : .;


