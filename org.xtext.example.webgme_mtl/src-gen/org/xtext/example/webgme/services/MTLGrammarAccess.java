/*
* generated by Xtext
*/
package org.xtext.example.webgme.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MTLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Model:
		//	rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//rules+=Rule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInPatternsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPatternsInPatternParserRuleCall_4_0 = (RuleCall)cInPatternsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFilterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_5_1_0 = (RuleCall)cFilterAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutPatternsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutPatternsOutPatternParserRuleCall_7_0 = (RuleCall)cOutPatternsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rule:
		//	"rule" name=ID "{" "from" inPatterns+=InPattern+ ("(" filter=Filter ")")? "to" outPatterns+=OutPattern+ "}";
		public ParserRule getRule() { return rule; }

		//"rule" name=ID "{" "from" inPatterns+=InPattern+ ("(" filter=Filter ")")? "to" outPatterns+=OutPattern+ "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//inPatterns+=InPattern+
		public Assignment getInPatternsAssignment_4() { return cInPatternsAssignment_4; }

		//InPattern
		public RuleCall getInPatternsInPatternParserRuleCall_4_0() { return cInPatternsInPatternParserRuleCall_4_0; }

		//("(" filter=Filter ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//filter=Filter
		public Assignment getFilterAssignment_5_1() { return cFilterAssignment_5_1; }

		//Filter
		public RuleCall getFilterFilterParserRuleCall_5_1_0() { return cFilterFilterParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//outPatterns+=OutPattern+
		public Assignment getOutPatternsAssignment_7() { return cOutPatternsAssignment_7; }

		//OutPattern
		public RuleCall getOutPatternsOutPatternParserRuleCall_7_0() { return cOutPatternsOutPatternParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInElemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInElemIDTerminalRuleCall_0_0 = (RuleCall)cInElemAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//InPattern:
		//	inElem=ID ":" className=ID;
		public ParserRule getRule() { return rule; }

		//inElem=ID ":" className=ID
		public Group getGroup() { return cGroup; }

		//inElem=ID
		public Assignment getInElemAssignment_0() { return cInElemAssignment_0; }

		//ID
		public RuleCall getInElemIDTerminalRuleCall_0_0() { return cInElemIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }
	}

	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filter");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprComplexExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//Filter:
		//	expr=ComplexExpression;
		public ParserRule getRule() { return rule; }

		//expr=ComplexExpression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//ComplexExpression
		public RuleCall getExprComplexExpressionParserRuleCall_0() { return cExprComplexExpressionParserRuleCall_0; }
	}

	public class OutPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAssgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssgAssignationParserRuleCall_4_0 = (RuleCall)cAssgAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OutPattern:
		//	varName=ID ":" className=ID "(" assg+=Assignation* ")";
		public ParserRule getRule() { return rule; }

		//varName=ID ":" className=ID "(" assg+=Assignation* ")"
		public Group getGroup() { return cGroup; }

		//varName=ID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//assg+=Assignation*
		public Assignment getAssgAssignment_4() { return cAssgAssignment_4; }

		//Assignation
		public RuleCall getAssgAssignationParserRuleCall_4_0() { return cAssgAssignationParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AssignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAttributeIDTerminalRuleCall_0_0_0 = (RuleCall)cAttributeAssignment_0_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprComplexExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRelationshipAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationshipAssocRoleNameParserRuleCall_1_0_0 = (RuleCall)cRelationshipAssignment_1_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprComplexExpressionParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		
		//Assignation:
		//	attribute=ID "<-" expr=ComplexExpression | relationship=AssocRoleName "<-" expr=ComplexExpression;
		public ParserRule getRule() { return rule; }

		//attribute=ID "<-" expr=ComplexExpression | relationship=AssocRoleName "<-" expr=ComplexExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//attribute=ID "<-" expr=ComplexExpression
		public Group getGroup_0() { return cGroup_0; }

		//attribute=ID
		public Assignment getAttributeAssignment_0_0() { return cAttributeAssignment_0_0; }

		//ID
		public RuleCall getAttributeIDTerminalRuleCall_0_0_0() { return cAttributeIDTerminalRuleCall_0_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_0_1() { return cLessThanSignHyphenMinusKeyword_0_1; }

		//expr=ComplexExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//ComplexExpression
		public RuleCall getExprComplexExpressionParserRuleCall_0_2_0() { return cExprComplexExpressionParserRuleCall_0_2_0; }

		//relationship=AssocRoleName "<-" expr=ComplexExpression
		public Group getGroup_1() { return cGroup_1; }

		//relationship=AssocRoleName
		public Assignment getRelationshipAssignment_1_0() { return cRelationshipAssignment_1_0; }

		//AssocRoleName
		public RuleCall getRelationshipAssocRoleNameParserRuleCall_1_0_0() { return cRelationshipAssocRoleNameParserRuleCall_1_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1_1() { return cLessThanSignHyphenMinusKeyword_1_1; }

		//expr=ComplexExpression
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }

		//ComplexExpression
		public RuleCall getExprComplexExpressionParserRuleCall_1_2_0() { return cExprComplexExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment c_stringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall c_stringSTRINGTerminalRuleCall_0_0 = (RuleCall)c_stringAssignment_0.eContents().get(0);
		private final Assignment c_integerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall c_integerINTTerminalRuleCall_1_0 = (RuleCall)c_integerAssignment_1.eContents().get(0);
		private final Assignment c_doubleAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall c_doubleDOUBLETerminalRuleCall_2_0 = (RuleCall)c_doubleAssignment_2.eContents().get(0);
		private final Assignment c_booleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall c_booleanBOOLEANTerminalRuleCall_3_0 = (RuleCall)c_booleanAssignment_3.eContents().get(0);
		private final Assignment cIsNullAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cIsNullNullKeyword_4_0 = (Keyword)cIsNullAssignment_4.eContents().get(0);
		private final Assignment cNavigationAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNavigationNavigParserRuleCall_5_0 = (RuleCall)cNavigationAssignment_5.eContents().get(0);
		private final Assignment cIfSentenceAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cIfSentenceIfSentenceParserRuleCall_6_0 = (RuleCall)cIfSentenceAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cColectionTypeAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cColectionTypeCollectionTypeParserRuleCall_7_0_0 = (RuleCall)cColectionTypeAssignment_7_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElemsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElemsComplexExpressionParserRuleCall_7_2_0 = (RuleCall)cElemsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cNavAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cNavNavigationParserRuleCall_7_4_0 = (RuleCall)cNavAssignment_7_4.eContents().get(0);
		private final Assignment cResolveAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cResolveResolveExpParserRuleCall_8_0 = (RuleCall)cResolveAssignment_8.eContents().get(0);
		
		//SimpleExpression:
		//	_string=STRING | _integer=INT | _double=DOUBLE | _boolean=BOOLEAN | isNull="null" | navigation=Navig |
		//	ifSentence=IfSentence | colectionType=CollectionType "{" elems+=ComplexExpression* "}" nav+=Navigation* |
		//	resolve=ResolveExp;
		public ParserRule getRule() { return rule; }

		//_string=STRING | _integer=INT | _double=DOUBLE | _boolean=BOOLEAN | isNull="null" | navigation=Navig |
		//ifSentence=IfSentence | colectionType=CollectionType "{" elems+=ComplexExpression* "}" nav+=Navigation* |
		//resolve=ResolveExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//_string=STRING
		public Assignment get_stringAssignment_0() { return c_stringAssignment_0; }

		//STRING
		public RuleCall get_stringSTRINGTerminalRuleCall_0_0() { return c_stringSTRINGTerminalRuleCall_0_0; }

		//_integer=INT
		public Assignment get_integerAssignment_1() { return c_integerAssignment_1; }

		//INT
		public RuleCall get_integerINTTerminalRuleCall_1_0() { return c_integerINTTerminalRuleCall_1_0; }

		//_double=DOUBLE
		public Assignment get_doubleAssignment_2() { return c_doubleAssignment_2; }

		//DOUBLE
		public RuleCall get_doubleDOUBLETerminalRuleCall_2_0() { return c_doubleDOUBLETerminalRuleCall_2_0; }

		//_boolean=BOOLEAN
		public Assignment get_booleanAssignment_3() { return c_booleanAssignment_3; }

		//BOOLEAN
		public RuleCall get_booleanBOOLEANTerminalRuleCall_3_0() { return c_booleanBOOLEANTerminalRuleCall_3_0; }

		//isNull="null"
		public Assignment getIsNullAssignment_4() { return cIsNullAssignment_4; }

		//"null"
		public Keyword getIsNullNullKeyword_4_0() { return cIsNullNullKeyword_4_0; }

		//navigation=Navig
		public Assignment getNavigationAssignment_5() { return cNavigationAssignment_5; }

		//Navig
		public RuleCall getNavigationNavigParserRuleCall_5_0() { return cNavigationNavigParserRuleCall_5_0; }

		//ifSentence=IfSentence
		public Assignment getIfSentenceAssignment_6() { return cIfSentenceAssignment_6; }

		//IfSentence
		public RuleCall getIfSentenceIfSentenceParserRuleCall_6_0() { return cIfSentenceIfSentenceParserRuleCall_6_0; }

		//colectionType=CollectionType "{" elems+=ComplexExpression* "}" nav+=Navigation*
		public Group getGroup_7() { return cGroup_7; }

		//colectionType=CollectionType
		public Assignment getColectionTypeAssignment_7_0() { return cColectionTypeAssignment_7_0; }

		//CollectionType
		public RuleCall getColectionTypeCollectionTypeParserRuleCall_7_0_0() { return cColectionTypeCollectionTypeParserRuleCall_7_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//elems+=ComplexExpression*
		public Assignment getElemsAssignment_7_2() { return cElemsAssignment_7_2; }

		//ComplexExpression
		public RuleCall getElemsComplexExpressionParserRuleCall_7_2_0() { return cElemsComplexExpressionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//nav+=Navigation*
		public Assignment getNavAssignment_7_4() { return cNavAssignment_7_4; }

		//Navigation
		public RuleCall getNavNavigationParserRuleCall_7_4_0() { return cNavNavigationParserRuleCall_7_4_0; }

		//resolve=ResolveExp
		public Assignment getResolveAssignment_8() { return cResolveAssignment_8; }

		//ResolveExp
		public RuleCall getResolveResolveExpParserRuleCall_8_0() { return cResolveResolveExpParserRuleCall_8_0; }
	}

	public class NavigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Navig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrIDTerminalRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Assignment cNavigationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNavigationNavigationParserRuleCall_1_0 = (RuleCall)cNavigationAssignment_1.eContents().get(0);
		
		//Navig:
		//	attr=ID navigation+=Navigation*;
		public ParserRule getRule() { return rule; }

		//attr=ID navigation+=Navigation*
		public Group getGroup() { return cGroup; }

		//attr=ID
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//ID
		public RuleCall getAttrIDTerminalRuleCall_0_0() { return cAttrIDTerminalRuleCall_0_0; }

		//navigation+=Navigation*
		public Assignment getNavigationAssignment_1() { return cNavigationAssignment_1; }

		//Navigation
		public RuleCall getNavigationNavigationParserRuleCall_1_0() { return cNavigationNavigationParserRuleCall_1_0; }
	}

	public class NavigationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Navigation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAttNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAttNameIDTerminalRuleCall_0_1_0 = (RuleCall)cAttNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssocRoleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssocRoleAssocRoleNameParserRuleCall_1_1_0 = (RuleCall)cAssocRoleAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOpType1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpType1OCLOperationType1ParserRuleCall_2_1_0 = (RuleCall)cOpType1Assignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOpType2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOpType2OCLOperationType2ParserRuleCall_3_1_0 = (RuleCall)cOpType2Assignment_3_1.eContents().get(0);
		
		//Navigation:
		//	"." attName=ID | "." assocRole=AssocRoleName | "." opType1=OCLOperationType1 | "->" opType2=OCLOperationType2;
		public ParserRule getRule() { return rule; }

		//"." attName=ID | "." assocRole=AssocRoleName | "." opType1=OCLOperationType1 | "->" opType2=OCLOperationType2
		public Alternatives getAlternatives() { return cAlternatives; }

		//"." attName=ID
		public Group getGroup_0() { return cGroup_0; }

		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }

		//attName=ID
		public Assignment getAttNameAssignment_0_1() { return cAttNameAssignment_0_1; }

		//ID
		public RuleCall getAttNameIDTerminalRuleCall_0_1_0() { return cAttNameIDTerminalRuleCall_0_1_0; }

		//"." assocRole=AssocRoleName
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//assocRole=AssocRoleName
		public Assignment getAssocRoleAssignment_1_1() { return cAssocRoleAssignment_1_1; }

		//AssocRoleName
		public RuleCall getAssocRoleAssocRoleNameParserRuleCall_1_1_0() { return cAssocRoleAssocRoleNameParserRuleCall_1_1_0; }

		//"." opType1=OCLOperationType1
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//opType1=OCLOperationType1
		public Assignment getOpType1Assignment_2_1() { return cOpType1Assignment_2_1; }

		//OCLOperationType1
		public RuleCall getOpType1OCLOperationType1ParserRuleCall_2_1_0() { return cOpType1OCLOperationType1ParserRuleCall_2_1_0; }

		//"->" opType2=OCLOperationType2
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//opType2=OCLOperationType2
		public Assignment getOpType2Assignment_3_1() { return cOpType2Assignment_3_1; }

		//OCLOperationType2
		public RuleCall getOpType2OCLOperationType2ParserRuleCall_3_1_0() { return cOpType2OCLOperationType2ParserRuleCall_3_1_0; }
	}

	public class IfSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondComplexExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyComplexExpressionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElsebodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElsebodyComplexExpressionParserRuleCall_5_0 = (RuleCall)cElsebodyAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfSentence:
		//	"if" cond=ComplexExpression "then" body=ComplexExpression "else" elsebody=ComplexExpression "endif";
		public ParserRule getRule() { return rule; }

		//"if" cond=ComplexExpression "then" body=ComplexExpression "else" elsebody=ComplexExpression "endif"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=ComplexExpression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//ComplexExpression
		public RuleCall getCondComplexExpressionParserRuleCall_1_0() { return cCondComplexExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//body=ComplexExpression
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ComplexExpression
		public RuleCall getBodyComplexExpressionParserRuleCall_3_0() { return cBodyComplexExpressionParserRuleCall_3_0; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//elsebody=ComplexExpression
		public Assignment getElsebodyAssignment_5() { return cElsebodyAssignment_5; }

		//ComplexExpression
		public RuleCall getElsebodyComplexExpressionParserRuleCall_5_0() { return cElsebodyComplexExpressionParserRuleCall_5_0; }

		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}

	public class ResolveExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResolveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpComplexExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPositionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPositionINTTerminalRuleCall_3_1_0 = (RuleCall)cPositionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ResolveExp:
		//	"resolve" "(" exp=ComplexExpression ("," position=INT)? ")";
		public ParserRule getRule() { return rule; }

		//"resolve" "(" exp=ComplexExpression ("," position=INT)? ")"
		public Group getGroup() { return cGroup; }

		//"resolve"
		public Keyword getResolveKeyword_0() { return cResolveKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_2_0() { return cExpComplexExpressionParserRuleCall_2_0; }

		//("," position=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//position=INT
		public Assignment getPositionAssignment_3_1() { return cPositionAssignment_3_1; }

		//INT
		public RuleCall getPositionINTTerminalRuleCall_3_1_0() { return cPositionINTTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ComplexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrefixNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPrefixNotNotKeyword_0_0_0 = (Keyword)cPrefixNotAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftSimpleExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cInfixOpAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cInfixOpInfixPrimitiveOperatorParserRuleCall_0_3_0_0 = (RuleCall)cInfixOpAssignment_0_3_0.eContents().get(0);
		private final Assignment cRightAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cRightSimpleExpressionParserRuleCall_0_3_1_0 = (RuleCall)cRightAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftSimpleExpressionParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cInfixOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cInfixOpInfixPrimitiveOperatorParserRuleCall_1_1_0_0 = (RuleCall)cInfixOpAssignment_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightSimpleExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//ComplexExpression:
		//	prefixNot="not" "(" left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)* ")" |
		//	left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*;
		public ParserRule getRule() { return rule; }

		//prefixNot="not" "(" left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)* ")" |
		//left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//prefixNot="not" "(" left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)* ")"
		public Group getGroup_0() { return cGroup_0; }

		//prefixNot="not"
		public Assignment getPrefixNotAssignment_0_0() { return cPrefixNotAssignment_0_0; }

		//"not"
		public Keyword getPrefixNotNotKeyword_0_0_0() { return cPrefixNotNotKeyword_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//left=SimpleExpression
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }

		//SimpleExpression
		public RuleCall getLeftSimpleExpressionParserRuleCall_0_2_0() { return cLeftSimpleExpressionParserRuleCall_0_2_0; }

		//(infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//infixOp+=InfixPrimitiveOperator
		public Assignment getInfixOpAssignment_0_3_0() { return cInfixOpAssignment_0_3_0; }

		//InfixPrimitiveOperator
		public RuleCall getInfixOpInfixPrimitiveOperatorParserRuleCall_0_3_0_0() { return cInfixOpInfixPrimitiveOperatorParserRuleCall_0_3_0_0; }

		//right+=SimpleExpression
		public Assignment getRightAssignment_0_3_1() { return cRightAssignment_0_3_1; }

		//SimpleExpression
		public RuleCall getRightSimpleExpressionParserRuleCall_0_3_1_0() { return cRightSimpleExpressionParserRuleCall_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//left=SimpleExpression
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }

		//SimpleExpression
		public RuleCall getLeftSimpleExpressionParserRuleCall_1_0_0() { return cLeftSimpleExpressionParserRuleCall_1_0_0; }

		//(infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//infixOp+=InfixPrimitiveOperator
		public Assignment getInfixOpAssignment_1_1_0() { return cInfixOpAssignment_1_1_0; }

		//InfixPrimitiveOperator
		public RuleCall getInfixOpInfixPrimitiveOperatorParserRuleCall_1_1_0_0() { return cInfixOpInfixPrimitiveOperatorParserRuleCall_1_1_0_0; }

		//right+=SimpleExpression
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//SimpleExpression
		public RuleCall getRightSimpleExpressionParserRuleCall_1_1_1_0() { return cRightSimpleExpressionParserRuleCall_1_1_1_0; }
	}

	public class AssocRoleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssocRoleName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cChildrenAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cChildrenChildrenKeyword_0_0 = (Keyword)cChildrenAssignment_0.eContents().get(0);
		private final Assignment cParentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cParentParentKeyword_1_0 = (Keyword)cParentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//AssocRoleName:
		//	children="children()" | parent="parent()" | name=ID "()";
		public ParserRule getRule() { return rule; }

		//children="children()" | parent="parent()" | name=ID "()"
		public Alternatives getAlternatives() { return cAlternatives; }

		//children="children()"
		public Assignment getChildrenAssignment_0() { return cChildrenAssignment_0; }

		//"children()"
		public Keyword getChildrenChildrenKeyword_0_0() { return cChildrenChildrenKeyword_0_0; }

		//parent="parent()"
		public Assignment getParentAssignment_1() { return cParentAssignment_1; }

		//"parent()"
		public Keyword getParentParentKeyword_1_0() { return cParentParentKeyword_1_0; }

		//name=ID "()"
		public Group getGroup_2() { return cGroup_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}

	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBagKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//CollectionType:
		//	"Set" | "Sequence" | "Bag";
		public ParserRule getRule() { return rule; }

		//"Set" | "Sequence" | "Bag"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//"Sequence"
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }

		//"Bag"
		public Keyword getBagKeyword_2() { return cBagKeyword_2; }
	}

	public class OCLOperationType1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLOperationType1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllInsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAllInsAllInstancesOpParserRuleCall_0_0 = (RuleCall)cAllInsAssignment_0.eContents().get(0);
		private final Assignment cIsTypeOfAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIsTypeOfIsTypeOfOpParserRuleCall_1_0 = (RuleCall)cIsTypeOfAssignment_1.eContents().get(0);
		private final Assignment cToStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cToStringToStringOpParserRuleCall_2_0 = (RuleCall)cToStringAssignment_2.eContents().get(0);
		private final Assignment cConcatenateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConcatenateConcatOpParserRuleCall_3_0 = (RuleCall)cConcatenateAssignment_3.eContents().get(0);
		
		//OCLOperationType1:
		//	allIns=AllInstancesOp | isTypeOf=IsTypeOfOp | toString=ToStringOp | concatenate=ConcatOp;
		public ParserRule getRule() { return rule; }

		//allIns=AllInstancesOp | isTypeOf=IsTypeOfOp | toString=ToStringOp | concatenate=ConcatOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//allIns=AllInstancesOp
		public Assignment getAllInsAssignment_0() { return cAllInsAssignment_0; }

		//AllInstancesOp
		public RuleCall getAllInsAllInstancesOpParserRuleCall_0_0() { return cAllInsAllInstancesOpParserRuleCall_0_0; }

		//isTypeOf=IsTypeOfOp
		public Assignment getIsTypeOfAssignment_1() { return cIsTypeOfAssignment_1; }

		//IsTypeOfOp
		public RuleCall getIsTypeOfIsTypeOfOpParserRuleCall_1_0() { return cIsTypeOfIsTypeOfOpParserRuleCall_1_0; }

		//toString=ToStringOp
		public Assignment getToStringAssignment_2() { return cToStringAssignment_2; }

		//ToStringOp
		public RuleCall getToStringToStringOpParserRuleCall_2_0() { return cToStringToStringOpParserRuleCall_2_0; }

		//concatenate=ConcatOp
		public Assignment getConcatenateAssignment_3() { return cConcatenateAssignment_3; }

		//ConcatOp
		public RuleCall getConcatenateConcatOpParserRuleCall_3_0() { return cConcatenateConcatOpParserRuleCall_3_0; }
	}

	public class OCLOperationType2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLOperationType2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSizeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSizeSizeOpParserRuleCall_0_0 = (RuleCall)cSizeAssignment_0.eContents().get(0);
		private final Assignment cForallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cForallForAllOpParserRuleCall_1_0 = (RuleCall)cForallAssignment_1.eContents().get(0);
		private final Assignment cExistsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExistsExistsOpParserRuleCall_2_0 = (RuleCall)cExistsAssignment_2.eContents().get(0);
		private final Assignment cSelectAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSelectSelectOpParserRuleCall_3_0 = (RuleCall)cSelectAssignment_3.eContents().get(0);
		private final Assignment cCollectAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCollectCollectOpParserRuleCall_4_0 = (RuleCall)cCollectAssignment_4.eContents().get(0);
		private final Assignment cFirstAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFirstFirstOpParserRuleCall_5_0 = (RuleCall)cFirstAssignment_5.eContents().get(0);
		private final Assignment cLastAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cLastLastOpParserRuleCall_6_0 = (RuleCall)cLastAssignment_6.eContents().get(0);
		private final Assignment cIndexOfAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cIndexOfIndexOfOpParserRuleCall_7_0 = (RuleCall)cIndexOfAssignment_7.eContents().get(0);
		private final Assignment cUnionAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cUnionUnionOpParserRuleCall_8_0 = (RuleCall)cUnionAssignment_8.eContents().get(0);
		private final Assignment cIntersectionAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cIntersectionIntersectionOpParserRuleCall_9_0 = (RuleCall)cIntersectionAssignment_9.eContents().get(0);
		private final Assignment cIsUndefinedAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIsUndefinedIsUndefinedOpParserRuleCall_10_0 = (RuleCall)cIsUndefinedAssignment_10.eContents().get(0);
		
		//OCLOperationType2:
		//	size=SizeOp | forall=ForAllOp | exists=ExistsOp | select=SelectOp | collect=CollectOp | first=FirstOp | last=LastOp |
		//	indexOf=IndexOfOp | union=UnionOp | intersection=IntersectionOp | isUndefined=IsUndefinedOp;
		public ParserRule getRule() { return rule; }

		//size=SizeOp | forall=ForAllOp | exists=ExistsOp | select=SelectOp | collect=CollectOp | first=FirstOp | last=LastOp |
		//indexOf=IndexOfOp | union=UnionOp | intersection=IntersectionOp | isUndefined=IsUndefinedOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//size=SizeOp
		public Assignment getSizeAssignment_0() { return cSizeAssignment_0; }

		//SizeOp
		public RuleCall getSizeSizeOpParserRuleCall_0_0() { return cSizeSizeOpParserRuleCall_0_0; }

		//forall=ForAllOp
		public Assignment getForallAssignment_1() { return cForallAssignment_1; }

		//ForAllOp
		public RuleCall getForallForAllOpParserRuleCall_1_0() { return cForallForAllOpParserRuleCall_1_0; }

		//exists=ExistsOp
		public Assignment getExistsAssignment_2() { return cExistsAssignment_2; }

		//ExistsOp
		public RuleCall getExistsExistsOpParserRuleCall_2_0() { return cExistsExistsOpParserRuleCall_2_0; }

		//select=SelectOp
		public Assignment getSelectAssignment_3() { return cSelectAssignment_3; }

		//SelectOp
		public RuleCall getSelectSelectOpParserRuleCall_3_0() { return cSelectSelectOpParserRuleCall_3_0; }

		//collect=CollectOp
		public Assignment getCollectAssignment_4() { return cCollectAssignment_4; }

		//CollectOp
		public RuleCall getCollectCollectOpParserRuleCall_4_0() { return cCollectCollectOpParserRuleCall_4_0; }

		//first=FirstOp
		public Assignment getFirstAssignment_5() { return cFirstAssignment_5; }

		//FirstOp
		public RuleCall getFirstFirstOpParserRuleCall_5_0() { return cFirstFirstOpParserRuleCall_5_0; }

		//last=LastOp
		public Assignment getLastAssignment_6() { return cLastAssignment_6; }

		//LastOp
		public RuleCall getLastLastOpParserRuleCall_6_0() { return cLastLastOpParserRuleCall_6_0; }

		//indexOf=IndexOfOp
		public Assignment getIndexOfAssignment_7() { return cIndexOfAssignment_7; }

		//IndexOfOp
		public RuleCall getIndexOfIndexOfOpParserRuleCall_7_0() { return cIndexOfIndexOfOpParserRuleCall_7_0; }

		//union=UnionOp
		public Assignment getUnionAssignment_8() { return cUnionAssignment_8; }

		//UnionOp
		public RuleCall getUnionUnionOpParserRuleCall_8_0() { return cUnionUnionOpParserRuleCall_8_0; }

		//intersection=IntersectionOp
		public Assignment getIntersectionAssignment_9() { return cIntersectionAssignment_9; }

		//IntersectionOp
		public RuleCall getIntersectionIntersectionOpParserRuleCall_9_0() { return cIntersectionIntersectionOpParserRuleCall_9_0; }

		//isUndefined=IsUndefinedOp
		public Assignment getIsUndefinedAssignment_10() { return cIsUndefinedAssignment_10; }

		//IsUndefinedOp
		public RuleCall getIsUndefinedIsUndefinedOpParserRuleCall_10_0() { return cIsUndefinedIsUndefinedOpParserRuleCall_10_0; }
	}

	public class InfixPrimitiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfixPrimitiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPlusSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHyphenMinusKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSolidusKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAndKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//InfixPrimitiveOperator:
		//	"=" | "!=" | ">" | "<" | ">=" | "<=" | "+" | "-" | "*" | "/" | "and" | "or";
		public ParserRule getRule() { return rule; }

		//"=" | "!=" | ">" | "<" | ">=" | "<=" | "+" | "-" | "*" | "/" | "and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }

		//"+"
		public Keyword getPlusSignKeyword_6() { return cPlusSignKeyword_6; }

		//"-"
		public Keyword getHyphenMinusKeyword_7() { return cHyphenMinusKeyword_7; }

		//"*"
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }

		//"/"
		public Keyword getSolidusKeyword_9() { return cSolidusKeyword_9; }

		//"and"
		public Keyword getAndKeyword_10() { return cAndKeyword_10; }

		//"or"
		public Keyword getOrKeyword_11() { return cOrKeyword_11; }
	}

	public class SizeOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SizeOp:
		//	"size" "()";
		public ParserRule getRule() { return rule; }

		//"size" "()"
		public Group getGroup() { return cGroup; }

		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}

	public class FirstOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFirstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FirstOp:
		//	"first" "()";
		public ParserRule getRule() { return rule; }

		//"first" "()"
		public Group getGroup() { return cGroup; }

		//"first"
		public Keyword getFirstKeyword_0() { return cFirstKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}

	public class LastOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LastOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LastOp:
		//	"last" "()";
		public ParserRule getRule() { return rule; }

		//"last" "()"
		public Group getGroup() { return cGroup; }

		//"last"
		public Keyword getLastKeyword_0() { return cLastKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}

	public class IndexOfOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexOfOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IndexOfOp:
		//	"indexOf" "(" index=INT ")";
		public ParserRule getRule() { return rule; }

		//"indexOf" "(" index=INT ")"
		public Group getGroup() { return cGroup; }

		//"indexOf"
		public Keyword getIndexOfKeyword_0() { return cIndexOfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AllInstancesOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllInstancesOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllInstancesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AllInstancesOp:
		//	"allInstances" "()";
		public ParserRule getRule() { return rule; }

		//"allInstances" "()"
		public Group getGroup() { return cGroup; }

		//"allInstances"
		public Keyword getAllInstancesKeyword_0() { return cAllInstancesKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}

	public class ForAllOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpComplexExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ForAllOp:
		//	"forAll" "(" var=ID "|" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"forAll" "(" var=ID "|" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"forAll"
		public Keyword getForAllKeyword_0() { return cForAllKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_4_0() { return cExpComplexExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExistsOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpComplexExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExistsOp:
		//	"exists" "(" var=ID "|" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"exists" "(" var=ID "|" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"exists"
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_4_0() { return cExpComplexExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SelectOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpComplexExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectOp:
		//	"select" "(" var=ID "|" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"select" "(" var=ID "|" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_4_0() { return cExpComplexExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CollectOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpComplexExpressionParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CollectOp:
		//	"collect" "(" var=ID "|" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"collect" "(" var=ID "|" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"collect"
		public Keyword getCollectKeyword_0() { return cCollectKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_4_0() { return cExpComplexExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IsTypeOfOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsTypeOfOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsTypeOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsTypeOfOp:
		//	"isTypeOf" "(" className=ID ")";
		public ParserRule getRule() { return rule; }

		//"isTypeOf" "(" className=ID ")"
		public Group getGroup() { return cGroup; }

		//"isTypeOf"
		public Keyword getIsTypeOfKeyword_0() { return cIsTypeOfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ToStringOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToStringOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ToStringOp:
		//	"toString" "()";
		public ParserRule getRule() { return rule; }

		//"toString" "()"
		public Group getGroup() { return cGroup; }

		//"toString"
		public Keyword getToStringKeyword_0() { return cToStringKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}

	public class ConcatOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcatenateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSSTRINGTerminalRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConcatOp:
		//	"concatenate" "(" s=STRING ")";
		public ParserRule getRule() { return rule; }

		//"concatenate" "(" s=STRING ")"
		public Group getGroup() { return cGroup; }

		//"concatenate"
		public Keyword getConcatenateKeyword_0() { return cConcatenateKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//s=STRING
		public Assignment getSAssignment_2() { return cSAssignment_2; }

		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_2_0() { return cSSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UnionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpComplexExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnionOp:
		//	"union" "(" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"union" "(" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_2_0() { return cExpComplexExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IntersectionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntersectionOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntersectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpComplexExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntersectionOp:
		//	"intersection" "(" exp=ComplexExpression ")";
		public ParserRule getRule() { return rule; }

		//"intersection" "(" exp=ComplexExpression ")"
		public Group getGroup() { return cGroup; }

		//"intersection"
		public Keyword getIntersectionKeyword_0() { return cIntersectionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exp=ComplexExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//ComplexExpression
		public RuleCall getExpComplexExpressionParserRuleCall_2_0() { return cExpComplexExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IsUndefinedOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsUndefinedOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsUndefinedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsUndefinedOp:
		//	"isUndefined" "()";
		public ParserRule getRule() { return rule; }

		//"isUndefined" "()"
		public Group getGroup() { return cGroup; }

		//"isUndefined"
		public Keyword getIsUndefinedKeyword_0() { return cIsUndefinedKeyword_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tWS;
	private final RuleElements pRule;
	private final InPatternElements pInPattern;
	private final FilterElements pFilter;
	private final OutPatternElements pOutPattern;
	private final AssignationElements pAssignation;
	private final SimpleExpressionElements pSimpleExpression;
	private final NavigElements pNavig;
	private final NavigationElements pNavigation;
	private final IfSentenceElements pIfSentence;
	private final ResolveExpElements pResolveExp;
	private final ComplexExpressionElements pComplexExpression;
	private final AssocRoleNameElements pAssocRoleName;
	private final CollectionTypeElements pCollectionType;
	private final OCLOperationType1Elements pOCLOperationType1;
	private final OCLOperationType2Elements pOCLOperationType2;
	private final InfixPrimitiveOperatorElements pInfixPrimitiveOperator;
	private final SizeOpElements pSizeOp;
	private final FirstOpElements pFirstOp;
	private final LastOpElements pLastOp;
	private final IndexOfOpElements pIndexOfOp;
	private final AllInstancesOpElements pAllInstancesOp;
	private final ForAllOpElements pForAllOp;
	private final ExistsOpElements pExistsOp;
	private final SelectOpElements pSelectOp;
	private final CollectOpElements pCollectOp;
	private final IsTypeOfOpElements pIsTypeOfOp;
	private final ToStringOpElements pToStringOp;
	private final ConcatOpElements pConcatOp;
	private final UnionOpElements pUnionOp;
	private final IntersectionOpElements pIntersectionOp;
	private final IsUndefinedOpElements pIsUndefinedOp;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MTLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.pRule = new RuleElements();
		this.pInPattern = new InPatternElements();
		this.pFilter = new FilterElements();
		this.pOutPattern = new OutPatternElements();
		this.pAssignation = new AssignationElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pNavig = new NavigElements();
		this.pNavigation = new NavigationElements();
		this.pIfSentence = new IfSentenceElements();
		this.pResolveExp = new ResolveExpElements();
		this.pComplexExpression = new ComplexExpressionElements();
		this.pAssocRoleName = new AssocRoleNameElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pOCLOperationType1 = new OCLOperationType1Elements();
		this.pOCLOperationType2 = new OCLOperationType2Elements();
		this.pInfixPrimitiveOperator = new InfixPrimitiveOperatorElements();
		this.pSizeOp = new SizeOpElements();
		this.pFirstOp = new FirstOpElements();
		this.pLastOp = new LastOpElements();
		this.pIndexOfOp = new IndexOfOpElements();
		this.pAllInstancesOp = new AllInstancesOpElements();
		this.pForAllOp = new ForAllOpElements();
		this.pExistsOp = new ExistsOpElements();
		this.pSelectOp = new SelectOpElements();
		this.pCollectOp = new CollectOpElements();
		this.pIsTypeOfOp = new IsTypeOfOpElements();
		this.pToStringOp = new ToStringOpElements();
		this.pConcatOp = new ConcatOpElements();
		this.pUnionOp = new UnionOpElements();
		this.pIntersectionOp = new IntersectionOpElements();
		this.pIsUndefinedOp = new IsUndefinedOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.webgme.MTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal DOUBLE:
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//Rule:
	//	"rule" name=ID "{" "from" inPatterns+=InPattern+ ("(" filter=Filter ")")? "to" outPatterns+=OutPattern+ "}";
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//InPattern:
	//	inElem=ID ":" className=ID;
	public InPatternElements getInPatternAccess() {
		return pInPattern;
	}
	
	public ParserRule getInPatternRule() {
		return getInPatternAccess().getRule();
	}

	//Filter:
	//	expr=ComplexExpression;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}

	//OutPattern:
	//	varName=ID ":" className=ID "(" assg+=Assignation* ")";
	public OutPatternElements getOutPatternAccess() {
		return pOutPattern;
	}
	
	public ParserRule getOutPatternRule() {
		return getOutPatternAccess().getRule();
	}

	//Assignation:
	//	attribute=ID "<-" expr=ComplexExpression | relationship=AssocRoleName "<-" expr=ComplexExpression;
	public AssignationElements getAssignationAccess() {
		return pAssignation;
	}
	
	public ParserRule getAssignationRule() {
		return getAssignationAccess().getRule();
	}

	//SimpleExpression:
	//	_string=STRING | _integer=INT | _double=DOUBLE | _boolean=BOOLEAN | isNull="null" | navigation=Navig |
	//	ifSentence=IfSentence | colectionType=CollectionType "{" elems+=ComplexExpression* "}" nav+=Navigation* |
	//	resolve=ResolveExp;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//Navig:
	//	attr=ID navigation+=Navigation*;
	public NavigElements getNavigAccess() {
		return pNavig;
	}
	
	public ParserRule getNavigRule() {
		return getNavigAccess().getRule();
	}

	//Navigation:
	//	"." attName=ID | "." assocRole=AssocRoleName | "." opType1=OCLOperationType1 | "->" opType2=OCLOperationType2;
	public NavigationElements getNavigationAccess() {
		return pNavigation;
	}
	
	public ParserRule getNavigationRule() {
		return getNavigationAccess().getRule();
	}

	//IfSentence:
	//	"if" cond=ComplexExpression "then" body=ComplexExpression "else" elsebody=ComplexExpression "endif";
	public IfSentenceElements getIfSentenceAccess() {
		return pIfSentence;
	}
	
	public ParserRule getIfSentenceRule() {
		return getIfSentenceAccess().getRule();
	}

	//ResolveExp:
	//	"resolve" "(" exp=ComplexExpression ("," position=INT)? ")";
	public ResolveExpElements getResolveExpAccess() {
		return pResolveExp;
	}
	
	public ParserRule getResolveExpRule() {
		return getResolveExpAccess().getRule();
	}

	//ComplexExpression:
	//	prefixNot="not" "(" left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)* ")" |
	//	left=SimpleExpression (infixOp+=InfixPrimitiveOperator right+=SimpleExpression)*;
	public ComplexExpressionElements getComplexExpressionAccess() {
		return pComplexExpression;
	}
	
	public ParserRule getComplexExpressionRule() {
		return getComplexExpressionAccess().getRule();
	}

	//AssocRoleName:
	//	children="children()" | parent="parent()" | name=ID "()";
	public AssocRoleNameElements getAssocRoleNameAccess() {
		return pAssocRoleName;
	}
	
	public ParserRule getAssocRoleNameRule() {
		return getAssocRoleNameAccess().getRule();
	}

	//CollectionType:
	//	"Set" | "Sequence" | "Bag";
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	//OCLOperationType1:
	//	allIns=AllInstancesOp | isTypeOf=IsTypeOfOp | toString=ToStringOp | concatenate=ConcatOp;
	public OCLOperationType1Elements getOCLOperationType1Access() {
		return pOCLOperationType1;
	}
	
	public ParserRule getOCLOperationType1Rule() {
		return getOCLOperationType1Access().getRule();
	}

	//OCLOperationType2:
	//	size=SizeOp | forall=ForAllOp | exists=ExistsOp | select=SelectOp | collect=CollectOp | first=FirstOp | last=LastOp |
	//	indexOf=IndexOfOp | union=UnionOp | intersection=IntersectionOp | isUndefined=IsUndefinedOp;
	public OCLOperationType2Elements getOCLOperationType2Access() {
		return pOCLOperationType2;
	}
	
	public ParserRule getOCLOperationType2Rule() {
		return getOCLOperationType2Access().getRule();
	}

	//InfixPrimitiveOperator:
	//	"=" | "!=" | ">" | "<" | ">=" | "<=" | "+" | "-" | "*" | "/" | "and" | "or";
	public InfixPrimitiveOperatorElements getInfixPrimitiveOperatorAccess() {
		return pInfixPrimitiveOperator;
	}
	
	public ParserRule getInfixPrimitiveOperatorRule() {
		return getInfixPrimitiveOperatorAccess().getRule();
	}

	//SizeOp:
	//	"size" "()";
	public SizeOpElements getSizeOpAccess() {
		return pSizeOp;
	}
	
	public ParserRule getSizeOpRule() {
		return getSizeOpAccess().getRule();
	}

	//FirstOp:
	//	"first" "()";
	public FirstOpElements getFirstOpAccess() {
		return pFirstOp;
	}
	
	public ParserRule getFirstOpRule() {
		return getFirstOpAccess().getRule();
	}

	//LastOp:
	//	"last" "()";
	public LastOpElements getLastOpAccess() {
		return pLastOp;
	}
	
	public ParserRule getLastOpRule() {
		return getLastOpAccess().getRule();
	}

	//IndexOfOp:
	//	"indexOf" "(" index=INT ")";
	public IndexOfOpElements getIndexOfOpAccess() {
		return pIndexOfOp;
	}
	
	public ParserRule getIndexOfOpRule() {
		return getIndexOfOpAccess().getRule();
	}

	//AllInstancesOp:
	//	"allInstances" "()";
	public AllInstancesOpElements getAllInstancesOpAccess() {
		return pAllInstancesOp;
	}
	
	public ParserRule getAllInstancesOpRule() {
		return getAllInstancesOpAccess().getRule();
	}

	//ForAllOp:
	//	"forAll" "(" var=ID "|" exp=ComplexExpression ")";
	public ForAllOpElements getForAllOpAccess() {
		return pForAllOp;
	}
	
	public ParserRule getForAllOpRule() {
		return getForAllOpAccess().getRule();
	}

	//ExistsOp:
	//	"exists" "(" var=ID "|" exp=ComplexExpression ")";
	public ExistsOpElements getExistsOpAccess() {
		return pExistsOp;
	}
	
	public ParserRule getExistsOpRule() {
		return getExistsOpAccess().getRule();
	}

	//SelectOp:
	//	"select" "(" var=ID "|" exp=ComplexExpression ")";
	public SelectOpElements getSelectOpAccess() {
		return pSelectOp;
	}
	
	public ParserRule getSelectOpRule() {
		return getSelectOpAccess().getRule();
	}

	//CollectOp:
	//	"collect" "(" var=ID "|" exp=ComplexExpression ")";
	public CollectOpElements getCollectOpAccess() {
		return pCollectOp;
	}
	
	public ParserRule getCollectOpRule() {
		return getCollectOpAccess().getRule();
	}

	//IsTypeOfOp:
	//	"isTypeOf" "(" className=ID ")";
	public IsTypeOfOpElements getIsTypeOfOpAccess() {
		return pIsTypeOfOp;
	}
	
	public ParserRule getIsTypeOfOpRule() {
		return getIsTypeOfOpAccess().getRule();
	}

	//ToStringOp:
	//	"toString" "()";
	public ToStringOpElements getToStringOpAccess() {
		return pToStringOp;
	}
	
	public ParserRule getToStringOpRule() {
		return getToStringOpAccess().getRule();
	}

	//ConcatOp:
	//	"concatenate" "(" s=STRING ")";
	public ConcatOpElements getConcatOpAccess() {
		return pConcatOp;
	}
	
	public ParserRule getConcatOpRule() {
		return getConcatOpAccess().getRule();
	}

	//UnionOp:
	//	"union" "(" exp=ComplexExpression ")";
	public UnionOpElements getUnionOpAccess() {
		return pUnionOp;
	}
	
	public ParserRule getUnionOpRule() {
		return getUnionOpAccess().getRule();
	}

	//IntersectionOp:
	//	"intersection" "(" exp=ComplexExpression ")";
	public IntersectionOpElements getIntersectionOpAccess() {
		return pIntersectionOp;
	}
	
	public ParserRule getIntersectionOpRule() {
		return getIntersectionOpAccess().getRule();
	}

	//IsUndefinedOp:
	//	"isUndefined" "()";
	public IsUndefinedOpElements getIsUndefinedOpAccess() {
		return pIsUndefinedOp;
	}
	
	public ParserRule getIsUndefinedOpRule() {
		return getIsUndefinedOpAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
