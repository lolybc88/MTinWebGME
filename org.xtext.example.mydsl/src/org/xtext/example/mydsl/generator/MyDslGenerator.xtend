/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.mydsl.myDsl.*

import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class MyDslGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//	}
//}

//class MyDslGenerator extends AbstractGenerator {
//    @Inject extension IQualifiedNameProvider
//	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		for (e : resource.allContents.toIterable.filter(Entity)) {

            // Por cada entity se crea una clase con el mismo nombre y extension Java
            fsa.generateFile(
                    e.fullyQualifiedName.toString("/") + ".java",
                    e.compile)

		}

//		fsa.generateFile('greetings.txt', 'People to greet: ' +
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	}

    def compile(Entity e) '''
    «IF e.eContainer.fullyQualifiedName != null»
        package «e.eContainer.fullyQualifiedName»;
    «ENDIF»

    public class «e.name» {
    }
'''

    def compile(Feature f) '''
    private «f.type.fullyQualifiedName» «f.name»;

    public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
        return «f.name»;
    }

    public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
        this.«f.name» = «f.name»;
    }
'''

}
