/*
* generated by Xtext
*/
package org.xtext.example.webgme.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.webgme.services.MTLGrammarAccess;

public class MTLParser extends AbstractContentAssistParser {
	
	@Inject
	private MTLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.webgme.ui.contentassist.antlr.internal.InternalMTLParser createParser() {
		org.xtext.example.webgme.ui.contentassist.antlr.internal.InternalMTLParser result = new org.xtext.example.webgme.ui.contentassist.antlr.internal.InternalMTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAssignationAccess().getAlternatives(), "rule__Assignation__Alternatives");
					put(grammarAccess.getSimpleExpressionAccess().getAlternatives(), "rule__SimpleExpression__Alternatives");
					put(grammarAccess.getNavigationAccess().getAlternatives(), "rule__Navigation__Alternatives");
					put(grammarAccess.getComplexExpressionAccess().getAlternatives(), "rule__ComplexExpression__Alternatives");
					put(grammarAccess.getAssocRoleNameAccess().getAlternatives(), "rule__AssocRoleName__Alternatives");
					put(grammarAccess.getCollectionTypeAccess().getAlternatives(), "rule__CollectionType__Alternatives");
					put(grammarAccess.getOCLOperationType1Access().getAlternatives(), "rule__OCLOperationType1__Alternatives");
					put(grammarAccess.getOCLOperationType2Access().getAlternatives(), "rule__OCLOperationType2__Alternatives");
					put(grammarAccess.getInfixPrimitiveOperatorAccess().getAlternatives(), "rule__InfixPrimitiveOperator__Alternatives");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
					put(grammarAccess.getInPatternAccess().getGroup(), "rule__InPattern__Group__0");
					put(grammarAccess.getOutPatternAccess().getGroup(), "rule__OutPattern__Group__0");
					put(grammarAccess.getAssignationAccess().getGroup_0(), "rule__Assignation__Group_0__0");
					put(grammarAccess.getAssignationAccess().getGroup_1(), "rule__Assignation__Group_1__0");
					put(grammarAccess.getSimpleExpressionAccess().getGroup_7(), "rule__SimpleExpression__Group_7__0");
					put(grammarAccess.getNavigAccess().getGroup(), "rule__Navig__Group__0");
					put(grammarAccess.getNavigationAccess().getGroup_0(), "rule__Navigation__Group_0__0");
					put(grammarAccess.getNavigationAccess().getGroup_1(), "rule__Navigation__Group_1__0");
					put(grammarAccess.getNavigationAccess().getGroup_2(), "rule__Navigation__Group_2__0");
					put(grammarAccess.getNavigationAccess().getGroup_3(), "rule__Navigation__Group_3__0");
					put(grammarAccess.getIfSentenceAccess().getGroup(), "rule__IfSentence__Group__0");
					put(grammarAccess.getResolveExpAccess().getGroup(), "rule__ResolveExp__Group__0");
					put(grammarAccess.getResolveExpAccess().getGroup_3(), "rule__ResolveExp__Group_3__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup_0(), "rule__ComplexExpression__Group_0__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup_0_3(), "rule__ComplexExpression__Group_0_3__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup_1(), "rule__ComplexExpression__Group_1__0");
					put(grammarAccess.getComplexExpressionAccess().getGroup_1_1(), "rule__ComplexExpression__Group_1_1__0");
					put(grammarAccess.getAssocRoleNameAccess().getGroup_2(), "rule__AssocRoleName__Group_2__0");
					put(grammarAccess.getSizeOpAccess().getGroup(), "rule__SizeOp__Group__0");
					put(grammarAccess.getFirstOpAccess().getGroup(), "rule__FirstOp__Group__0");
					put(grammarAccess.getLastOpAccess().getGroup(), "rule__LastOp__Group__0");
					put(grammarAccess.getIndexOfOpAccess().getGroup(), "rule__IndexOfOp__Group__0");
					put(grammarAccess.getAllInstancesOpAccess().getGroup(), "rule__AllInstancesOp__Group__0");
					put(grammarAccess.getForAllOpAccess().getGroup(), "rule__ForAllOp__Group__0");
					put(grammarAccess.getExistsOpAccess().getGroup(), "rule__ExistsOp__Group__0");
					put(grammarAccess.getSelectOpAccess().getGroup(), "rule__SelectOp__Group__0");
					put(grammarAccess.getCollectOpAccess().getGroup(), "rule__CollectOp__Group__0");
					put(grammarAccess.getIsTypeOfOpAccess().getGroup(), "rule__IsTypeOfOp__Group__0");
					put(grammarAccess.getToStringOpAccess().getGroup(), "rule__ToStringOp__Group__0");
					put(grammarAccess.getConcatOpAccess().getGroup(), "rule__ConcatOp__Group__0");
					put(grammarAccess.getUnionOpAccess().getGroup(), "rule__UnionOp__Group__0");
					put(grammarAccess.getIntersectionOpAccess().getGroup(), "rule__IntersectionOp__Group__0");
					put(grammarAccess.getIsUndefinedOpAccess().getGroup(), "rule__IsUndefinedOp__Group__0");
					put(grammarAccess.getModelAccess().getRulesAssignment(), "rule__Model__RulesAssignment");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getInPatternsAssignment_4(), "rule__Rule__InPatternsAssignment_4");
					put(grammarAccess.getRuleAccess().getFilterAssignment_5_1(), "rule__Rule__FilterAssignment_5_1");
					put(grammarAccess.getRuleAccess().getOutPatternsAssignment_7(), "rule__Rule__OutPatternsAssignment_7");
					put(grammarAccess.getInPatternAccess().getInElemAssignment_0(), "rule__InPattern__InElemAssignment_0");
					put(grammarAccess.getInPatternAccess().getClassNameAssignment_2(), "rule__InPattern__ClassNameAssignment_2");
					put(grammarAccess.getFilterAccess().getExprAssignment(), "rule__Filter__ExprAssignment");
					put(grammarAccess.getOutPatternAccess().getVarNameAssignment_0(), "rule__OutPattern__VarNameAssignment_0");
					put(grammarAccess.getOutPatternAccess().getClassNameAssignment_2(), "rule__OutPattern__ClassNameAssignment_2");
					put(grammarAccess.getOutPatternAccess().getAssgAssignment_4(), "rule__OutPattern__AssgAssignment_4");
					put(grammarAccess.getAssignationAccess().getAttributeAssignment_0_0(), "rule__Assignation__AttributeAssignment_0_0");
					put(grammarAccess.getAssignationAccess().getExprAssignment_0_2(), "rule__Assignation__ExprAssignment_0_2");
					put(grammarAccess.getAssignationAccess().getRelationshipAssignment_1_0(), "rule__Assignation__RelationshipAssignment_1_0");
					put(grammarAccess.getAssignationAccess().getExprAssignment_1_2(), "rule__Assignation__ExprAssignment_1_2");
					put(grammarAccess.getSimpleExpressionAccess().get_stringAssignment_0(), "rule__SimpleExpression___stringAssignment_0");
					put(grammarAccess.getSimpleExpressionAccess().get_integerAssignment_1(), "rule__SimpleExpression___integerAssignment_1");
					put(grammarAccess.getSimpleExpressionAccess().get_doubleAssignment_2(), "rule__SimpleExpression___doubleAssignment_2");
					put(grammarAccess.getSimpleExpressionAccess().get_booleanAssignment_3(), "rule__SimpleExpression___booleanAssignment_3");
					put(grammarAccess.getSimpleExpressionAccess().getIsNullAssignment_4(), "rule__SimpleExpression__IsNullAssignment_4");
					put(grammarAccess.getSimpleExpressionAccess().getNavigationAssignment_5(), "rule__SimpleExpression__NavigationAssignment_5");
					put(grammarAccess.getSimpleExpressionAccess().getIfSentenceAssignment_6(), "rule__SimpleExpression__IfSentenceAssignment_6");
					put(grammarAccess.getSimpleExpressionAccess().getColectionTypeAssignment_7_0(), "rule__SimpleExpression__ColectionTypeAssignment_7_0");
					put(grammarAccess.getSimpleExpressionAccess().getElemsAssignment_7_2(), "rule__SimpleExpression__ElemsAssignment_7_2");
					put(grammarAccess.getSimpleExpressionAccess().getNavAssignment_7_4(), "rule__SimpleExpression__NavAssignment_7_4");
					put(grammarAccess.getSimpleExpressionAccess().getResolveAssignment_8(), "rule__SimpleExpression__ResolveAssignment_8");
					put(grammarAccess.getNavigAccess().getAttrAssignment_0(), "rule__Navig__AttrAssignment_0");
					put(grammarAccess.getNavigAccess().getNavigationAssignment_1(), "rule__Navig__NavigationAssignment_1");
					put(grammarAccess.getNavigationAccess().getAttNameAssignment_0_1(), "rule__Navigation__AttNameAssignment_0_1");
					put(grammarAccess.getNavigationAccess().getAssocRoleAssignment_1_1(), "rule__Navigation__AssocRoleAssignment_1_1");
					put(grammarAccess.getNavigationAccess().getOpType1Assignment_2_1(), "rule__Navigation__OpType1Assignment_2_1");
					put(grammarAccess.getNavigationAccess().getOpType2Assignment_3_1(), "rule__Navigation__OpType2Assignment_3_1");
					put(grammarAccess.getIfSentenceAccess().getCondAssignment_1(), "rule__IfSentence__CondAssignment_1");
					put(grammarAccess.getIfSentenceAccess().getBodyAssignment_3(), "rule__IfSentence__BodyAssignment_3");
					put(grammarAccess.getIfSentenceAccess().getElsebodyAssignment_5(), "rule__IfSentence__ElsebodyAssignment_5");
					put(grammarAccess.getResolveExpAccess().getExpAssignment_2(), "rule__ResolveExp__ExpAssignment_2");
					put(grammarAccess.getResolveExpAccess().getPositionAssignment_3_1(), "rule__ResolveExp__PositionAssignment_3_1");
					put(grammarAccess.getComplexExpressionAccess().getPrefixNotAssignment_0_0(), "rule__ComplexExpression__PrefixNotAssignment_0_0");
					put(grammarAccess.getComplexExpressionAccess().getLeftAssignment_0_2(), "rule__ComplexExpression__LeftAssignment_0_2");
					put(grammarAccess.getComplexExpressionAccess().getInfixOpAssignment_0_3_0(), "rule__ComplexExpression__InfixOpAssignment_0_3_0");
					put(grammarAccess.getComplexExpressionAccess().getRightAssignment_0_3_1(), "rule__ComplexExpression__RightAssignment_0_3_1");
					put(grammarAccess.getComplexExpressionAccess().getLeftAssignment_1_0(), "rule__ComplexExpression__LeftAssignment_1_0");
					put(grammarAccess.getComplexExpressionAccess().getInfixOpAssignment_1_1_0(), "rule__ComplexExpression__InfixOpAssignment_1_1_0");
					put(grammarAccess.getComplexExpressionAccess().getRightAssignment_1_1_1(), "rule__ComplexExpression__RightAssignment_1_1_1");
					put(grammarAccess.getAssocRoleNameAccess().getChildrenAssignment_0(), "rule__AssocRoleName__ChildrenAssignment_0");
					put(grammarAccess.getAssocRoleNameAccess().getParentAssignment_1(), "rule__AssocRoleName__ParentAssignment_1");
					put(grammarAccess.getAssocRoleNameAccess().getNameAssignment_2_0(), "rule__AssocRoleName__NameAssignment_2_0");
					put(grammarAccess.getOCLOperationType1Access().getAllInsAssignment_0(), "rule__OCLOperationType1__AllInsAssignment_0");
					put(grammarAccess.getOCLOperationType1Access().getIsTypeOfAssignment_1(), "rule__OCLOperationType1__IsTypeOfAssignment_1");
					put(grammarAccess.getOCLOperationType1Access().getToStringAssignment_2(), "rule__OCLOperationType1__ToStringAssignment_2");
					put(grammarAccess.getOCLOperationType1Access().getConcatenateAssignment_3(), "rule__OCLOperationType1__ConcatenateAssignment_3");
					put(grammarAccess.getOCLOperationType2Access().getSizeAssignment_0(), "rule__OCLOperationType2__SizeAssignment_0");
					put(grammarAccess.getOCLOperationType2Access().getForallAssignment_1(), "rule__OCLOperationType2__ForallAssignment_1");
					put(grammarAccess.getOCLOperationType2Access().getExistsAssignment_2(), "rule__OCLOperationType2__ExistsAssignment_2");
					put(grammarAccess.getOCLOperationType2Access().getSelectAssignment_3(), "rule__OCLOperationType2__SelectAssignment_3");
					put(grammarAccess.getOCLOperationType2Access().getCollectAssignment_4(), "rule__OCLOperationType2__CollectAssignment_4");
					put(grammarAccess.getOCLOperationType2Access().getFirstAssignment_5(), "rule__OCLOperationType2__FirstAssignment_5");
					put(grammarAccess.getOCLOperationType2Access().getLastAssignment_6(), "rule__OCLOperationType2__LastAssignment_6");
					put(grammarAccess.getOCLOperationType2Access().getIndexOfAssignment_7(), "rule__OCLOperationType2__IndexOfAssignment_7");
					put(grammarAccess.getOCLOperationType2Access().getUnionAssignment_8(), "rule__OCLOperationType2__UnionAssignment_8");
					put(grammarAccess.getOCLOperationType2Access().getIntersectionAssignment_9(), "rule__OCLOperationType2__IntersectionAssignment_9");
					put(grammarAccess.getOCLOperationType2Access().getIsUndefinedAssignment_10(), "rule__OCLOperationType2__IsUndefinedAssignment_10");
					put(grammarAccess.getIndexOfOpAccess().getIndexAssignment_2(), "rule__IndexOfOp__IndexAssignment_2");
					put(grammarAccess.getForAllOpAccess().getVarAssignment_2(), "rule__ForAllOp__VarAssignment_2");
					put(grammarAccess.getForAllOpAccess().getExpAssignment_4(), "rule__ForAllOp__ExpAssignment_4");
					put(grammarAccess.getExistsOpAccess().getVarAssignment_2(), "rule__ExistsOp__VarAssignment_2");
					put(grammarAccess.getExistsOpAccess().getExpAssignment_4(), "rule__ExistsOp__ExpAssignment_4");
					put(grammarAccess.getSelectOpAccess().getVarAssignment_2(), "rule__SelectOp__VarAssignment_2");
					put(grammarAccess.getSelectOpAccess().getExpAssignment_4(), "rule__SelectOp__ExpAssignment_4");
					put(grammarAccess.getCollectOpAccess().getVarAssignment_2(), "rule__CollectOp__VarAssignment_2");
					put(grammarAccess.getCollectOpAccess().getExpAssignment_4(), "rule__CollectOp__ExpAssignment_4");
					put(grammarAccess.getIsTypeOfOpAccess().getClassNameAssignment_2(), "rule__IsTypeOfOp__ClassNameAssignment_2");
					put(grammarAccess.getConcatOpAccess().getSAssignment_2(), "rule__ConcatOp__SAssignment_2");
					put(grammarAccess.getUnionOpAccess().getExpAssignment_2(), "rule__UnionOp__ExpAssignment_2");
					put(grammarAccess.getIntersectionOpAccess().getExpAssignment_2(), "rule__IntersectionOp__ExpAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.webgme.ui.contentassist.antlr.internal.InternalMTLParser typedParser = (org.xtext.example.webgme.ui.contentassist.antlr.internal.InternalMTLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
